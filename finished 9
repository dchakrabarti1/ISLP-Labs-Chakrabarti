{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "18156290",
      "metadata": {
        "id": "18156290"
      },
      "source": [
        "\n",
        "# Linear Regression\n",
        "\n",
        "<a target=\"_blank\" href=\"https://colab.research.google.com/github/intro-stat-learning/ISLP_labs/blob/v2.2/Ch03-linreg-lab.ipynb\">\n",
        "<img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n",
        "</a>\n",
        "\n",
        "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/intro-stat-learning/ISLP_labs/v2.2?labpath=Ch03-linreg-lab.ipynb)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c62aa70",
      "metadata": {
        "id": "7c62aa70"
      },
      "source": [
        "## Importing packages\n",
        "We import our standard libraries at this top\n",
        "level."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "c5fcfd8f",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:06.947153Z",
          "iopub.status.busy": "2024-06-04T23:19:06.946906Z",
          "iopub.status.idle": "2024-06-04T23:19:07.382217Z",
          "shell.execute_reply": "2024-06-04T23:19:07.381975Z"
        },
        "lines_to_next_cell": 2,
        "id": "c5fcfd8f"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from matplotlib.pyplot import subplots\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bc3e353a",
      "metadata": {
        "id": "bc3e353a"
      },
      "source": [
        "### New imports\n",
        "Throughout this lab we will introduce new functions and libraries. However,\n",
        "we will import them here to emphasize these are the new\n",
        "code objects in this lab. Keeping imports near the top\n",
        "of a notebook makes the code more readable, since scanning the first few\n",
        "lines tells us what libraries are used."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "42cfb62e",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.383806Z",
          "iopub.status.busy": "2024-06-04T23:19:07.383707Z",
          "iopub.status.idle": "2024-06-04T23:19:07.847757Z",
          "shell.execute_reply": "2024-06-04T23:19:07.847487Z"
        },
        "lines_to_next_cell": 0,
        "id": "42cfb62e"
      },
      "outputs": [],
      "source": [
        "import statsmodels.api as sm\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dd7ce405",
      "metadata": {
        "id": "dd7ce405"
      },
      "source": [
        " We will provide relevant details about the\n",
        "functions below as they are needed.\n",
        "\n",
        "Besides importing whole modules, it is also possible\n",
        "to import only a few items from a given module. This\n",
        "will help keep the  *namespace* clean.\n",
        "We will use a few specific objects from the `statsmodels` package\n",
        "which we import here."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "b387d3ac",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.849417Z",
          "iopub.status.busy": "2024-06-04T23:19:07.849298Z",
          "iopub.status.idle": "2024-06-04T23:19:07.851636Z",
          "shell.execute_reply": "2024-06-04T23:19:07.851436Z"
        },
        "id": "b387d3ac"
      },
      "outputs": [],
      "source": [
        "from statsmodels.stats.outliers_influence \\\n",
        "     import variance_inflation_factor as VIF\n",
        "from statsmodels.stats.anova import anova_lm\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install ISLP"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VsvhFQFCedQA",
        "outputId": "1ae5eff6-5823-47bb-cd80-028144b1b4cb"
      },
      "id": "VsvhFQFCedQA",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ISLP\n",
            "  Downloading ISLP-0.4.0-py3-none-any.whl.metadata (7.0 kB)\n",
            "Requirement already satisfied: numpy>=1.7.1 in /usr/local/lib/python3.11/dist-packages (from ISLP) (1.26.4)\n",
            "Requirement already satisfied: scipy>=0.9 in /usr/local/lib/python3.11/dist-packages (from ISLP) (1.13.1)\n",
            "Requirement already satisfied: pandas>=0.20 in /usr/local/lib/python3.11/dist-packages (from ISLP) (2.2.2)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.11/dist-packages (from ISLP) (5.3.0)\n",
            "Requirement already satisfied: scikit-learn>=1.2 in /usr/local/lib/python3.11/dist-packages (from ISLP) (1.6.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from ISLP) (1.4.2)\n",
            "Requirement already satisfied: statsmodels>=0.13 in /usr/local/lib/python3.11/dist-packages (from ISLP) (0.14.4)\n",
            "Collecting lifelines (from ISLP)\n",
            "  Downloading lifelines-0.30.0-py3-none-any.whl.metadata (3.2 kB)\n",
            "Collecting pygam (from ISLP)\n",
            "  Downloading pygam-0.9.1-py3-none-any.whl.metadata (7.1 kB)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (from ISLP) (2.5.1+cu124)\n",
            "Collecting pytorch-lightning (from ISLP)\n",
            "  Downloading pytorch_lightning-2.5.0.post0-py3-none-any.whl.metadata (21 kB)\n",
            "Collecting torchmetrics (from ISLP)\n",
            "  Downloading torchmetrics-1.6.1-py3-none-any.whl.metadata (21 kB)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.20->ISLP) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.20->ISLP) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.20->ISLP) (2025.1)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.2->ISLP) (3.5.0)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.13->ISLP) (1.0.1)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.13->ISLP) (24.2)\n",
            "Requirement already satisfied: matplotlib>=3.0 in /usr/local/lib/python3.11/dist-packages (from lifelines->ISLP) (3.10.0)\n",
            "Requirement already satisfied: autograd>=1.5 in /usr/local/lib/python3.11/dist-packages (from lifelines->ISLP) (1.7.0)\n",
            "Collecting autograd-gamma>=0.3 (from lifelines->ISLP)\n",
            "  Downloading autograd-gamma-0.5.0.tar.gz (4.0 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting formulaic>=0.2.2 (from lifelines->ISLP)\n",
            "  Downloading formulaic-1.1.1-py3-none-any.whl.metadata (6.9 kB)\n",
            "Requirement already satisfied: progressbar2<5.0.0,>=4.2.0 in /usr/local/lib/python3.11/dist-packages (from pygam->ISLP) (4.5.0)\n",
            "Collecting scipy>=0.9 (from ISLP)\n",
            "  Downloading scipy-1.11.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.4/60.4 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tqdm>=4.57.0 in /usr/local/lib/python3.11/dist-packages (from pytorch-lightning->ISLP) (4.67.1)\n",
            "Requirement already satisfied: PyYAML>=5.4 in /usr/local/lib/python3.11/dist-packages (from pytorch-lightning->ISLP) (6.0.2)\n",
            "Requirement already satisfied: fsspec>=2022.5.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (2024.10.0)\n",
            "Requirement already satisfied: typing-extensions>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from pytorch-lightning->ISLP) (4.12.2)\n",
            "Collecting lightning-utilities>=0.10.0 (from pytorch-lightning->ISLP)\n",
            "  Downloading lightning_utilities-0.12.0-py3-none-any.whl.metadata (5.6 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (3.17.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (3.1.5)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch->ISLP)\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch->ISLP)\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch->ISLP)\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch->ISLP)\n",
            "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch->ISLP)\n",
            "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch->ISLP)\n",
            "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.5.147 (from torch->ISLP)\n",
            "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch->ISLP)\n",
            "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch->ISLP)\n",
            "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (12.4.127)\n",
            "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch->ISLP)\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (3.1.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch->ISLP) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch->ISLP) (1.3.0)\n",
            "Collecting interface-meta>=1.2.0 (from formulaic>=0.2.2->lifelines->ISLP)\n",
            "  Downloading interface_meta-1.3.0-py3-none-any.whl.metadata (6.7 kB)\n",
            "Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.11/dist-packages (from formulaic>=0.2.2->lifelines->ISLP) (1.17.2)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (3.11.11)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from lightning-utilities>=0.10.0->pytorch-lightning->ISLP) (75.1.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.0->lifelines->ISLP) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.0->lifelines->ISLP) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.0->lifelines->ISLP) (4.55.7)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.0->lifelines->ISLP) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.0->lifelines->ISLP) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.0->lifelines->ISLP) (3.2.1)\n",
            "Requirement already satisfied: python-utils>=3.8.1 in /usr/local/lib/python3.11/dist-packages (from progressbar2<5.0.0,>=4.2.0->pygam->ISLP) (3.9.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=0.20->ISLP) (1.17.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch->ISLP) (3.0.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (2.4.4)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (25.1.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (6.1.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (0.2.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (1.18.3)\n",
            "Requirement already satisfied: idna>=2.0 in /usr/local/lib/python3.11/dist-packages (from yarl<2.0,>=1.17.0->aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2022.5.0->pytorch-lightning->ISLP) (3.10)\n",
            "Downloading ISLP-0.4.0-py3-none-any.whl (3.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m78.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading lifelines-0.30.0-py3-none-any.whl (349 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m349.3/349.3 kB\u001b[0m \u001b[31m27.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pygam-0.9.1-py3-none-any.whl (522 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m522.0/522.0 kB\u001b[0m \u001b[31m37.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading scipy-1.11.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (36.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m36.4/36.4 MB\u001b[0m \u001b[31m18.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pytorch_lightning-2.5.0.post0-py3-none-any.whl (819 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m819.3/819.3 kB\u001b[0m \u001b[31m47.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m64.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m51.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m35.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m794.8 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m67.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading torchmetrics-1.6.1-py3-none-any.whl (927 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m927.3/927.3 kB\u001b[0m \u001b[31m46.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading formulaic-1.1.1-py3-none-any.whl (115 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.7/115.7 kB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading lightning_utilities-0.12.0-py3-none-any.whl (28 kB)\n",
            "Downloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\n",
            "Building wheels for collected packages: autograd-gamma\n",
            "  Building wheel for autograd-gamma (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for autograd-gamma: filename=autograd_gamma-0.5.0-py3-none-any.whl size=4031 sha256=dba4c508ac94a5308dd8f3408be15ce301f17f0782585030377e541d7594c199\n",
            "  Stored in directory: /root/.cache/pip/wheels/8b/67/f4/2caaae2146198dcb824f31a303833b07b14a5ec863fb3acd7b\n",
            "Successfully built autograd-gamma\n",
            "Installing collected packages: scipy, nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, lightning-utilities, interface-meta, nvidia-cusparse-cu12, nvidia-cudnn-cu12, autograd-gamma, pygam, nvidia-cusolver-cu12, formulaic, lifelines, torchmetrics, pytorch-lightning, ISLP\n",
            "  Attempting uninstall: scipy\n",
            "    Found existing installation: scipy 1.13.1\n",
            "    Uninstalling scipy-1.13.1:\n",
            "      Successfully uninstalled scipy-1.13.1\n",
            "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
            "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
            "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-curand-cu12\n",
            "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
            "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
            "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
            "  Attempting uninstall: nvidia-cufft-cu12\n",
            "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
            "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
            "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
            "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
            "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
            "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
            "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cublas-cu12\n",
            "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
            "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
            "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
            "  Attempting uninstall: nvidia-cusparse-cu12\n",
            "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
            "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
            "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
            "  Attempting uninstall: nvidia-cudnn-cu12\n",
            "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
            "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
            "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
            "  Attempting uninstall: nvidia-cusolver-cu12\n",
            "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
            "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
            "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
            "Successfully installed ISLP-0.4.0 autograd-gamma-0.5.0 formulaic-1.1.1 interface-meta-1.3.0 lifelines-0.30.0 lightning-utilities-0.12.0 nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127 pygam-0.9.1 pytorch-lightning-2.5.0.post0 scipy-1.11.4 torchmetrics-1.6.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b4713b12",
      "metadata": {
        "id": "b4713b12"
      },
      "source": [
        "As one of the import statements above is quite a long line, we inserted a line break `\\` to\n",
        "ease readability.\n",
        "\n",
        "We will also use some functions written for the labs in this book in the `ISLP`\n",
        "package."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "307b7e22",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.852868Z",
          "iopub.status.busy": "2024-06-04T23:19:07.852785Z",
          "iopub.status.idle": "2024-06-04T23:19:07.979269Z",
          "shell.execute_reply": "2024-06-04T23:19:07.978990Z"
        },
        "id": "307b7e22"
      },
      "outputs": [],
      "source": [
        "from ISLP import load_data\n",
        "from ISLP.models import (ModelSpec as MS,\n",
        "                         summarize,\n",
        "                         poly)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "81d778fb",
      "metadata": {
        "id": "81d778fb"
      },
      "source": [
        "### Inspecting Objects and Namespaces\n",
        "The\n",
        "function  `dir()`\n",
        "provides a list of\n",
        "objects in a namespace."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "79099069",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.981106Z",
          "iopub.status.busy": "2024-06-04T23:19:07.980941Z",
          "iopub.status.idle": "2024-06-04T23:19:07.983820Z",
          "shell.execute_reply": "2024-06-04T23:19:07.983580Z"
        },
        "lines_to_next_cell": 0,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "79099069",
        "outputId": "7d3808d2-499f-4e3d-d8e1-1dad8c4e2b8f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['In',\n",
              " 'MS',\n",
              " 'Out',\n",
              " 'VIF',\n",
              " '_',\n",
              " '__',\n",
              " '___',\n",
              " '__builtin__',\n",
              " '__builtins__',\n",
              " '__doc__',\n",
              " '__loader__',\n",
              " '__name__',\n",
              " '__package__',\n",
              " '__spec__',\n",
              " '_dh',\n",
              " '_exit_code',\n",
              " '_i',\n",
              " '_i1',\n",
              " '_i2',\n",
              " '_i3',\n",
              " '_i4',\n",
              " '_i5',\n",
              " '_i6',\n",
              " '_ih',\n",
              " '_ii',\n",
              " '_iii',\n",
              " '_oh',\n",
              " 'anova_lm',\n",
              " 'exit',\n",
              " 'get_ipython',\n",
              " 'load_data',\n",
              " 'np',\n",
              " 'pd',\n",
              " 'poly',\n",
              " 'quit',\n",
              " 'sm',\n",
              " 'subplots',\n",
              " 'summarize']"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "dir()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "237f9711",
      "metadata": {
        "id": "237f9711"
      },
      "source": [
        " This shows you everything that `Python` can find at the top level.\n",
        "There are certain objects like `__builtins__` that contain references to built-in\n",
        "functions like `print()`.\n",
        "\n",
        "Every python object has its own notion of\n",
        "namespace, also accessible with `dir()`. This will include\n",
        "both the attributes of the object\n",
        "as well as any methods associated with it. For instance, we see `'sum'` in the listing for an\n",
        "array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3f99195f",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.985095Z",
          "iopub.status.busy": "2024-06-04T23:19:07.985002Z",
          "iopub.status.idle": "2024-06-04T23:19:07.987401Z",
          "shell.execute_reply": "2024-06-04T23:19:07.987190Z"
        },
        "lines_to_next_cell": 0,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3f99195f",
        "outputId": "8ee976f9-1204-404f-8483-45d91b6cae61"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['T',\n",
              " '__abs__',\n",
              " '__add__',\n",
              " '__and__',\n",
              " '__array__',\n",
              " '__array_finalize__',\n",
              " '__array_function__',\n",
              " '__array_interface__',\n",
              " '__array_prepare__',\n",
              " '__array_priority__',\n",
              " '__array_struct__',\n",
              " '__array_ufunc__',\n",
              " '__array_wrap__',\n",
              " '__bool__',\n",
              " '__class__',\n",
              " '__class_getitem__',\n",
              " '__complex__',\n",
              " '__contains__',\n",
              " '__copy__',\n",
              " '__deepcopy__',\n",
              " '__delattr__',\n",
              " '__delitem__',\n",
              " '__dir__',\n",
              " '__divmod__',\n",
              " '__dlpack__',\n",
              " '__dlpack_device__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__float__',\n",
              " '__floordiv__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getitem__',\n",
              " '__getstate__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__iadd__',\n",
              " '__iand__',\n",
              " '__ifloordiv__',\n",
              " '__ilshift__',\n",
              " '__imatmul__',\n",
              " '__imod__',\n",
              " '__imul__',\n",
              " '__index__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__int__',\n",
              " '__invert__',\n",
              " '__ior__',\n",
              " '__ipow__',\n",
              " '__irshift__',\n",
              " '__isub__',\n",
              " '__iter__',\n",
              " '__itruediv__',\n",
              " '__ixor__',\n",
              " '__le__',\n",
              " '__len__',\n",
              " '__lshift__',\n",
              " '__lt__',\n",
              " '__matmul__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__neg__',\n",
              " '__new__',\n",
              " '__or__',\n",
              " '__pos__',\n",
              " '__pow__',\n",
              " '__radd__',\n",
              " '__rand__',\n",
              " '__rdivmod__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rfloordiv__',\n",
              " '__rlshift__',\n",
              " '__rmatmul__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__ror__',\n",
              " '__rpow__',\n",
              " '__rrshift__',\n",
              " '__rshift__',\n",
              " '__rsub__',\n",
              " '__rtruediv__',\n",
              " '__rxor__',\n",
              " '__setattr__',\n",
              " '__setitem__',\n",
              " '__setstate__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__sub__',\n",
              " '__subclasshook__',\n",
              " '__truediv__',\n",
              " '__xor__',\n",
              " 'all',\n",
              " 'any',\n",
              " 'argmax',\n",
              " 'argmin',\n",
              " 'argpartition',\n",
              " 'argsort',\n",
              " 'astype',\n",
              " 'base',\n",
              " 'byteswap',\n",
              " 'choose',\n",
              " 'clip',\n",
              " 'compress',\n",
              " 'conj',\n",
              " 'conjugate',\n",
              " 'copy',\n",
              " 'ctypes',\n",
              " 'cumprod',\n",
              " 'cumsum',\n",
              " 'data',\n",
              " 'diagonal',\n",
              " 'dot',\n",
              " 'dtype',\n",
              " 'dump',\n",
              " 'dumps',\n",
              " 'fill',\n",
              " 'flags',\n",
              " 'flat',\n",
              " 'flatten',\n",
              " 'getfield',\n",
              " 'imag',\n",
              " 'item',\n",
              " 'itemset',\n",
              " 'itemsize',\n",
              " 'max',\n",
              " 'mean',\n",
              " 'min',\n",
              " 'nbytes',\n",
              " 'ndim',\n",
              " 'newbyteorder',\n",
              " 'nonzero',\n",
              " 'partition',\n",
              " 'prod',\n",
              " 'ptp',\n",
              " 'put',\n",
              " 'ravel',\n",
              " 'real',\n",
              " 'repeat',\n",
              " 'reshape',\n",
              " 'resize',\n",
              " 'round',\n",
              " 'searchsorted',\n",
              " 'setfield',\n",
              " 'setflags',\n",
              " 'shape',\n",
              " 'size',\n",
              " 'sort',\n",
              " 'squeeze',\n",
              " 'std',\n",
              " 'strides',\n",
              " 'sum',\n",
              " 'swapaxes',\n",
              " 'take',\n",
              " 'tobytes',\n",
              " 'tofile',\n",
              " 'tolist',\n",
              " 'tostring',\n",
              " 'trace',\n",
              " 'transpose',\n",
              " 'var',\n",
              " 'view']"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "A = np.array([3,5,11])\n",
        "dir(A)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9d776f61",
      "metadata": {
        "id": "9d776f61"
      },
      "source": [
        " This indicates that the object `A.sum` exists. In this case it is a method\n",
        "that can be used to compute the sum of the array `A` as can be seen by typing `A.sum?`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f3f913ca",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.988574Z",
          "iopub.status.busy": "2024-06-04T23:19:07.988481Z",
          "iopub.status.idle": "2024-06-04T23:19:07.990266Z",
          "shell.execute_reply": "2024-06-04T23:19:07.990078Z"
        },
        "lines_to_next_cell": 0,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f3f913ca",
        "outputId": "6de7dc31-18ab-47ce-9ed6-306094b44518"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "19"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "A.sum()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "974fad08",
      "metadata": {
        "id": "974fad08"
      },
      "source": [
        "    "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0b212f1f",
      "metadata": {
        "id": "0b212f1f"
      },
      "source": [
        "## Simple Linear Regression\n",
        "In this section we will  construct model\n",
        "matrices (also called design matrices) using the `ModelSpec()`  transform from `ISLP.models`.\n",
        "\n",
        "We  will use the `Boston` housing data set, which is contained in the `ISLP` package.  The `Boston` dataset records  `medv`  (median house value) for $506$ neighborhoods\n",
        "around Boston.  We will build a regression model to predict  `medv`  using $13$\n",
        "predictors such as  `rmvar`  (average number of rooms per house),\n",
        " `age`  (proportion of owner-occupied units built prior to 1940), and  `lstat`  (percent of\n",
        "households with low socioeconomic status).  We will use `statsmodels` for this\n",
        "task, a `Python` package that implements several commonly used\n",
        "regression methods.\n",
        "\n",
        "We have included a simple loading function `load_data()` in the\n",
        "`ISLP` package:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "id": "d720e2c5",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.991415Z",
          "iopub.status.busy": "2024-06-04T23:19:07.991335Z",
          "iopub.status.idle": "2024-06-04T23:19:07.995566Z",
          "shell.execute_reply": "2024-06-04T23:19:07.995348Z"
        },
        "id": "d720e2c5"
      },
      "outputs": [],
      "source": [
        "Boston = load_data(\"Boston\")\n",
        "Boston.columns\n",
        "Boston?\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "27b9c8f5",
      "metadata": {
        "id": "27b9c8f5"
      },
      "source": [
        "Type `Boston?` to find out more about these data.\n",
        "\n",
        "We start by using the `sm.OLS()`  function to fit a\n",
        "simple linear regression model.  Our response will be\n",
        " `medv`  and  `lstat`  will be the single predictor.\n",
        "For this model, we can create the model matrix by hand.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "40e9b0d5",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:07.996720Z",
          "iopub.status.busy": "2024-06-04T23:19:07.996648Z",
          "iopub.status.idle": "2024-06-04T23:19:08.000848Z",
          "shell.execute_reply": "2024-06-04T23:19:08.000660Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "40e9b0d5",
        "outputId": "2e55654a-3308-4217-e4f6-ad728183ec97"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   intercept  lstat\n",
              "0        1.0   4.98\n",
              "1        1.0   9.14\n",
              "2        1.0   4.03\n",
              "3        1.0   2.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dde92adf-21b0-4d02-9974-ec506c6f8cd8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>intercept</th>\n",
              "      <th>lstat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dde92adf-21b0-4d02-9974-ec506c6f8cd8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dde92adf-21b0-4d02-9974-ec506c6f8cd8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dde92adf-21b0-4d02-9974-ec506c6f8cd8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-69650af4-b82d-4e79-abb4-467d7a6a9f0b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69650af4-b82d-4e79-abb4-467d7a6a9f0b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-69650af4-b82d-4e79-abb4-467d7a6a9f0b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"X[:4]\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"intercept\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lstat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.709703243284524,\n        \"min\": 2.94,\n        \"max\": 9.14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "X = pd.DataFrame({'intercept': np.ones(Boston.shape[0]),\n",
        "                  'lstat': Boston['lstat']})\n",
        "X[:4]\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "162d93ef",
      "metadata": {
        "id": "162d93ef"
      },
      "source": [
        "We extract the response, and fit the model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "id": "c1d544d6",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.002003Z",
          "iopub.status.busy": "2024-06-04T23:19:08.001934Z",
          "iopub.status.idle": "2024-06-04T23:19:08.003890Z",
          "shell.execute_reply": "2024-06-04T23:19:08.003673Z"
        },
        "lines_to_next_cell": 0,
        "id": "c1d544d6"
      },
      "outputs": [],
      "source": [
        "y = Boston['medv']\n",
        "model = sm.OLS(y, X)\n",
        "results = model.fit()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2a1d62f2",
      "metadata": {
        "id": "2a1d62f2"
      },
      "source": [
        "Note that `sm.OLS()` does\n",
        "not fit the model; it specifies the model, and then `model.fit()` does the actual fitting.  \n",
        "\n",
        "Our `ISLP` function `summarize()` produces a simple table of the parameter estimates,\n",
        "their standard errors, t-statistics and p-values.\n",
        "The function takes a single argument, such as the object `results`\n",
        "returned here by the `fit`\n",
        "method, and returns such a summary."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "3d340a07",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.004988Z",
          "iopub.status.busy": "2024-06-04T23:19:08.004916Z",
          "iopub.status.idle": "2024-06-04T23:19:08.018774Z",
          "shell.execute_reply": "2024-06-04T23:19:08.018578Z"
        },
        "lines_to_next_cell": 2,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 147
        },
        "id": "3d340a07",
        "outputId": "727cfed7-1cb7-4b25-cad2-8ca27d41fbe4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "intercept    34.553841\n",
              "lstat        -0.950049\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>34.553841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat</th>\n",
              "      <td>-0.950049</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "summarize(results)\n",
        "results.params\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "31d6b202",
      "metadata": {
        "id": "31d6b202"
      },
      "source": [
        "Before we describe other methods for working with fitted models, we outline a more useful and general framework for constructing a model matrix~`X`.\n",
        "### Using Transformations: Fit and Transform\n",
        "Our model above has a single predictor, and constructing `X` was straightforward.\n",
        "In practice  we often fit models with more than one predictor, typically selected from an array or data frame.\n",
        "We may wish to introduce transformations to the variables before fitting the model, specify interactions between variables, and expand some particular variables into sets of variables (e.g. polynomials).\n",
        "The `sklearn`  package has a particular notion\n",
        "for this type of task: a *transform*. A transform is an object\n",
        "that is created with some parameters as arguments. The\n",
        "object has two main methods: `fit()` and `transform()`.\n",
        "\n",
        "We provide a general approach for specifying models and constructing\n",
        "the model matrix through the transform `ModelSpec()` in the `ISLP` library.\n",
        "`ModelSpec()`\n",
        "(renamed `MS()` in the preamble) creates a\n",
        "transform object, and then a pair of methods\n",
        "`transform()` and `fit()` are used to construct a\n",
        "corresponding model matrix.\n",
        "\n",
        "We first describe this process for our simple regression model  using a single predictor `lstat` in\n",
        "the `Boston` data frame, but will use it repeatedly in more\n",
        "complex tasks in this and other labs in this book.\n",
        "In our case the transform is created by the expression\n",
        "`design = MS(['lstat'])`.\n",
        "\n",
        "The `fit()`  method takes the original array and may do some\n",
        "initial computations on it, as specified in the transform object.\n",
        "For example, it may compute means and standard deviations for centering and scaling.\n",
        "The `transform()`\n",
        "method applies the fitted transformation to the array of data, and produces the model matrix.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "11b07af0",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.019954Z",
          "iopub.status.busy": "2024-06-04T23:19:08.019865Z",
          "iopub.status.idle": "2024-06-04T23:19:08.024711Z",
          "shell.execute_reply": "2024-06-04T23:19:08.024511Z"
        },
        "lines_to_next_cell": 0,
        "id": "11b07af0",
        "outputId": "1958250a-e8c6-458a-f762-ed374836d8e3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   intercept  lstat\n",
              "0        1.0   4.98\n",
              "1        1.0   9.14\n",
              "2        1.0   4.03\n",
              "3        1.0   2.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8070e6ed-90b1-45f0-8b69-05ab3e9ea936\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>intercept</th>\n",
              "      <th>lstat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8070e6ed-90b1-45f0-8b69-05ab3e9ea936')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8070e6ed-90b1-45f0-8b69-05ab3e9ea936 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8070e6ed-90b1-45f0-8b69-05ab3e9ea936');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09faee76-8c75-456e-9b42-18a9570952e3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09faee76-8c75-456e-9b42-18a9570952e3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09faee76-8c75-456e-9b42-18a9570952e3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"X[:4]\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"intercept\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lstat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.709703243284524,\n        \"min\": 2.94,\n        \"max\": 9.14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "design = MS(['lstat'])\n",
        "design = design.fit(Boston)\n",
        "X = design.transform(Boston)\n",
        "X[:4]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f35e5292",
      "metadata": {
        "id": "f35e5292"
      },
      "source": [
        "In this simple case, the `fit()`  method does very little; it simply checks that the variable `'lstat'` specified in `design` exists in `Boston`. Then `transform()` constructs the model matrix with two columns: an `intercept` and the variable `lstat`.\n",
        "\n",
        "These two operations can be  combined with the\n",
        "`fit_transform()`  method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "id": "d5c7b370",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.025839Z",
          "iopub.status.busy": "2024-06-04T23:19:08.025769Z",
          "iopub.status.idle": "2024-06-04T23:19:08.030216Z",
          "shell.execute_reply": "2024-06-04T23:19:08.030007Z"
        },
        "lines_to_next_cell": 0,
        "id": "d5c7b370",
        "outputId": "6b66f3a8-475a-41f7-edfc-089676c1755f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   intercept  lstat\n",
              "0        1.0   4.98\n",
              "1        1.0   9.14\n",
              "2        1.0   4.03\n",
              "3        1.0   2.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6c575ef-094b-4b91-9cab-fa3b7082c116\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>intercept</th>\n",
              "      <th>lstat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6c575ef-094b-4b91-9cab-fa3b7082c116')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b6c575ef-094b-4b91-9cab-fa3b7082c116 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b6c575ef-094b-4b91-9cab-fa3b7082c116');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3f0ada63-05db-408c-8cd9-d983bb6523f0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f0ada63-05db-408c-8cd9-d983bb6523f0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3f0ada63-05db-408c-8cd9-d983bb6523f0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"X[:4]\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"intercept\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lstat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.709703243284524,\n        \"min\": 2.94,\n        \"max\": 9.14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "design = MS(['lstat'])\n",
        "X = design.fit_transform(Boston)\n",
        "X[:4]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8f09689d",
      "metadata": {
        "id": "8f09689d"
      },
      "source": [
        "Note that, as in the previous code chunk when the two steps were done separately, the `design` object is changed as a result of the `fit()` operation. The power of this pipeline will become clearer when we fit more complex models that involve interactions and transformations."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "94a7c0aa",
      "metadata": {
        "id": "94a7c0aa"
      },
      "source": [
        "Let's return to our fitted regression model.\n",
        "The object\n",
        "`results` has several methods that can be used for inference.\n",
        "We already presented a function `summarize()` for showing the essentials of the fit.\n",
        "For a full and somewhat exhaustive summary of the fit, we can use the `summary()`\n",
        "method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "id": "5b205c0b",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.031520Z",
          "iopub.status.busy": "2024-06-04T23:19:08.031448Z",
          "iopub.status.idle": "2024-06-04T23:19:08.039162Z",
          "shell.execute_reply": "2024-06-04T23:19:08.038952Z"
        },
        "id": "5b205c0b",
        "outputId": "28a2c966-381d-4be5-8593-54bb877a51fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:                   medv   R-squared:                       0.544\n",
              "Model:                            OLS   Adj. R-squared:                  0.543\n",
              "Method:                 Least Squares   F-statistic:                     601.6\n",
              "Date:                Mon, 03 Feb 2025   Prob (F-statistic):           5.08e-88\n",
              "Time:                        16:33:17   Log-Likelihood:                -1641.5\n",
              "No. Observations:                 506   AIC:                             3287.\n",
              "Df Residuals:                     504   BIC:                             3295.\n",
              "Df Model:                           1                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "==============================================================================\n",
              "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "intercept     34.5538      0.563     61.415      0.000      33.448      35.659\n",
              "lstat         -0.9500      0.039    -24.528      0.000      -1.026      -0.874\n",
              "==============================================================================\n",
              "Omnibus:                      137.043   Durbin-Watson:                   0.892\n",
              "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              291.373\n",
              "Skew:                           1.453   Prob(JB):                     5.36e-64\n",
              "Kurtosis:                       5.319   Cond. No.                         29.7\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>          <td>medv</td>       <th>  R-squared:         </th> <td>   0.544</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.543</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   601.6</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Mon, 03 Feb 2025</td> <th>  Prob (F-statistic):</th> <td>5.08e-88</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>16:33:17</td>     <th>  Log-Likelihood:    </th> <td> -1641.5</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>   506</td>      <th>  AIC:               </th> <td>   3287.</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>   504</td>      <th>  BIC:               </th> <td>   3295.</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>intercept</th> <td>   34.5538</td> <td>    0.563</td> <td>   61.415</td> <td> 0.000</td> <td>   33.448</td> <td>   35.659</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>lstat</th>     <td>   -0.9500</td> <td>    0.039</td> <td>  -24.528</td> <td> 0.000</td> <td>   -1.026</td> <td>   -0.874</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>137.043</td> <th>  Durbin-Watson:     </th> <td>   0.892</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 291.373</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 1.453</td>  <th>  Prob(JB):          </th> <td>5.36e-64</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 5.319</td>  <th>  Cond. No.          </th> <td>    29.7</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &       medv       & \\textbf{  R-squared:         } &     0.544   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.543   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     601.6   \\\\\n\\textbf{Date:}             & Mon, 03 Feb 2025 & \\textbf{  Prob (F-statistic):} &  5.08e-88   \\\\\n\\textbf{Time:}             &     16:33:17     & \\textbf{  Log-Likelihood:    } &   -1641.5   \\\\\n\\textbf{No. Observations:} &         506      & \\textbf{  AIC:               } &     3287.   \\\\\n\\textbf{Df Residuals:}     &         504      & \\textbf{  BIC:               } &     3295.   \\\\\n\\textbf{Df Model:}         &           1      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{intercept} &      34.5538  &        0.563     &    61.415  &         0.000        &       33.448    &       35.659     \\\\\n\\textbf{lstat}     &      -0.9500  &        0.039     &   -24.528  &         0.000        &       -1.026    &       -0.874     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 137.043 & \\textbf{  Durbin-Watson:     } &    0.892  \\\\\n\\textbf{Prob(Omnibus):} &   0.000 & \\textbf{  Jarque-Bera (JB):  } &  291.373  \\\\\n\\textbf{Skew:}          &   1.453 & \\textbf{  Prob(JB):          } & 5.36e-64  \\\\\n\\textbf{Kurtosis:}      &   5.319 & \\textbf{  Cond. No.          } &     29.7  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "results.summary()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6c30baa4",
      "metadata": {
        "id": "6c30baa4"
      },
      "source": [
        "The fitted coefficients can also be retrieved as the\n",
        "`params` attribute of `results`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "id": "4b024467",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.040404Z",
          "iopub.status.busy": "2024-06-04T23:19:08.040333Z",
          "iopub.status.idle": "2024-06-04T23:19:08.042402Z",
          "shell.execute_reply": "2024-06-04T23:19:08.042202Z"
        },
        "lines_to_next_cell": 2,
        "id": "4b024467",
        "outputId": "16b01442-7001-4313-ca34-04fea5b99d28",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 147
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "intercept    34.553841\n",
              "lstat        -0.950049\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>34.553841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat</th>\n",
              "      <td>-0.950049</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "results.params\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fb7bbd4c",
      "metadata": {
        "id": "fb7bbd4c"
      },
      "source": [
        "The `get_prediction()`  method can be used to obtain predictions, and produce confidence intervals and\n",
        "prediction intervals for the prediction of  `medv`  for  given values of  `lstat`.\n",
        "\n",
        "We first create a new data frame, in this case containing only the variable `lstat`, with the values for this variable at which we wish to make predictions.\n",
        "We then use the `transform()` method of `design` to create the corresponding model matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "id": "195e0ace",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.043693Z",
          "iopub.status.busy": "2024-06-04T23:19:08.043622Z",
          "iopub.status.idle": "2024-06-04T23:19:08.046777Z",
          "shell.execute_reply": "2024-06-04T23:19:08.046559Z"
        },
        "id": "195e0ace",
        "outputId": "4c98b6b0-995d-445f-971a-260282f2135b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   intercept  lstat\n",
              "0        1.0      5\n",
              "1        1.0     10\n",
              "2        1.0     15"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91ed3df0-7767-4a22-8f3c-cbac9bc091fb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>intercept</th>\n",
              "      <th>lstat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91ed3df0-7767-4a22-8f3c-cbac9bc091fb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91ed3df0-7767-4a22-8f3c-cbac9bc091fb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91ed3df0-7767-4a22-8f3c-cbac9bc091fb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ae6bd9c5-7acc-446c-896b-553805946cfc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae6bd9c5-7acc-446c-896b-553805946cfc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ae6bd9c5-7acc-446c-896b-553805946cfc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7c22bc7f-bfaa-47c9-ab16-5e651e1543e7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('newX')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7c22bc7f-bfaa-47c9-ab16-5e651e1543e7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('newX');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "newX",
              "summary": "{\n  \"name\": \"newX\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"intercept\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lstat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 5,\n        \"max\": 15,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "new_df = pd.DataFrame({'lstat':[5, 10, 15]})\n",
        "newX = design.transform(new_df)\n",
        "newX\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "43565f15",
      "metadata": {
        "id": "43565f15"
      },
      "source": [
        "Next we compute the predictions at `newX`, and view them by extracting the `predicted_mean` attribute."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "id": "768374f6",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.047996Z",
          "iopub.status.busy": "2024-06-04T23:19:08.047918Z",
          "iopub.status.idle": "2024-06-04T23:19:08.049956Z",
          "shell.execute_reply": "2024-06-04T23:19:08.049747Z"
        },
        "lines_to_next_cell": 0,
        "id": "768374f6",
        "outputId": "d6280e66-49f1-482f-f803-3709c3a522e1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([29.80359411, 25.05334734, 20.30310057])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "new_predictions = results.get_prediction(newX);\n",
        "new_predictions.predicted_mean\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "313c1720",
      "metadata": {
        "id": "313c1720"
      },
      "source": [
        "We can produce confidence intervals for the predicted values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "id": "1a86b943",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.051110Z",
          "iopub.status.busy": "2024-06-04T23:19:08.051038Z",
          "iopub.status.idle": "2024-06-04T23:19:08.052989Z",
          "shell.execute_reply": "2024-06-04T23:19:08.052779Z"
        },
        "lines_to_next_cell": 0,
        "id": "1a86b943",
        "outputId": "a8f0646e-34b1-4e51-8c7a-cb67323ac986",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[29.00741194, 30.59977628],\n",
              "       [24.47413202, 25.63256267],\n",
              "       [19.73158815, 20.87461299]])"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "new_predictions.conf_int(alpha=0.05)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3595344e",
      "metadata": {
        "id": "3595344e"
      },
      "source": [
        "Prediction intervals are computing by setting `obs=True`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "id": "ea9727ca",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.054282Z",
          "iopub.status.busy": "2024-06-04T23:19:08.054215Z",
          "iopub.status.idle": "2024-06-04T23:19:08.056172Z",
          "shell.execute_reply": "2024-06-04T23:19:08.055964Z"
        },
        "lines_to_next_cell": 0,
        "id": "ea9727ca",
        "outputId": "87f498be-9466-4472-cba4-52f29ff13ecc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[17.56567478, 42.04151344],\n",
              "       [12.82762635, 37.27906833],\n",
              "       [ 8.0777421 , 32.52845905]])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "new_predictions.conf_int(obs=True, alpha=0.05)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b157334d",
      "metadata": {
        "id": "b157334d"
      },
      "source": [
        " For instance, the 95% confidence interval associated with an\n",
        " `lstat`  value of 10 is (24.47, 25.63), and the 95% prediction\n",
        "interval is (12.82, 37.28).  As expected, the confidence and\n",
        "prediction intervals are centered around the same point (a predicted\n",
        "value of 25.05 for  `medv`  when  `lstat`  equals\n",
        "10), but the latter are substantially wider.\n",
        "\n",
        "Next we will plot  `medv`  and  `lstat`\n",
        "using `DataFrame.plot.scatter()`, \\definelongblankMR{plot.scatter()}{plot.slashslashscatter()}\n",
        "and wish to\n",
        "add the regression line to the resulting plot."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "05f5b29a",
      "metadata": {
        "id": "05f5b29a"
      },
      "source": [
        "### Defining Functions\n",
        "While there is a function\n",
        "within the `ISLP` package that adds a line to an existing plot, we take this opportunity\n",
        "to define our first function to do so."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "id": "796c20f6",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.057406Z",
          "iopub.status.busy": "2024-06-04T23:19:08.057339Z",
          "iopub.status.idle": "2024-06-04T23:19:08.059024Z",
          "shell.execute_reply": "2024-06-04T23:19:08.058807Z"
        },
        "lines_to_next_cell": 0,
        "id": "796c20f6"
      },
      "outputs": [],
      "source": [
        "def abline(ax, b, m):\n",
        "    \"Add a line with slope m and intercept b to ax\"\n",
        "    xlim = ax.get_xlim()\n",
        "    ylim = [m * xlim[0] + b, m * xlim[1] + b]\n",
        "    ax.plot(xlim, ylim)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5eb99e73",
      "metadata": {
        "id": "5eb99e73"
      },
      "source": [
        " A few things are illustrated above. First we see the syntax for defining a function:\n",
        "`def funcname(...)`. The function has arguments `ax, b, m`\n",
        "where `ax` is an axis object for an exisiting plot, `b` is the intercept and\n",
        "`m` is the slope of the desired line. Other plotting  options can be passed on to\n",
        "`ax.plot` by including additional optional arguments as follows:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "id": "a258b8c0",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.060183Z",
          "iopub.status.busy": "2024-06-04T23:19:08.060117Z",
          "iopub.status.idle": "2024-06-04T23:19:08.061624Z",
          "shell.execute_reply": "2024-06-04T23:19:08.061396Z"
        },
        "lines_to_next_cell": 0,
        "id": "a258b8c0"
      },
      "outputs": [],
      "source": [
        "def abline(ax, b, m, *args, **kwargs):\n",
        "    \"Add a line with slope m and intercept b to ax\"\n",
        "    xlim = ax.get_xlim()\n",
        "    ylim = [m * xlim[0] + b, m * xlim[1] + b]\n",
        "    ax.plot(xlim, ylim, *args, **kwargs)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "be8f4615",
      "metadata": {
        "id": "be8f4615"
      },
      "source": [
        "The addition of `*args` allows any number of\n",
        "non-named arguments to `abline`, while `*kwargs` allows any\n",
        "number of named arguments (such as `linewidth=3`) to `abline`.\n",
        "In our function, we pass\n",
        "these arguments verbatim to `ax.plot` above. Readers\n",
        "interested in learning more about\n",
        "functions are referred to the section on\n",
        "defining functions in [docs.python.org/tutorial](https://docs.python.org/3/tutorial/controlflow.html#defining-functions).\n",
        "\n",
        "Let’s use our new function to add this regression line to a plot of\n",
        "`medv` vs. `lstat`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "id": "56b75491",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.062821Z",
          "iopub.status.busy": "2024-06-04T23:19:08.062745Z",
          "iopub.status.idle": "2024-06-04T23:19:08.177528Z",
          "shell.execute_reply": "2024-06-04T23:19:08.175973Z"
        },
        "lines_to_next_cell": 0,
        "id": "56b75491",
        "outputId": "dd0e56ba-98da-4d65-b722-d05860c143aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 538
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-43-caecce4b31f6>:3: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  results.params[0],\n",
            "<ipython-input-43-caecce4b31f6>:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  results.params[1],\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "ax = Boston.plot.scatter('lstat', 'medv')\n",
        "abline(ax,\n",
        "       results.params[0],\n",
        "       results.params[1],\n",
        "       'r--',\n",
        "       linewidth=3)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "04a1e56f",
      "metadata": {
        "id": "04a1e56f"
      },
      "source": [
        "Thus, the final call to `ax.plot()` is `ax.plot(xlim, ylim, 'r--', linewidth=3)`.\n",
        "We have used the argument `'r--'` to produce a red dashed line, and added\n",
        "an argument to make it of width 3.\n",
        "There is some evidence for non-linearity in the relationship between  `lstat`  and  `medv`. We will explore this issue later in this lab.\n",
        "\n",
        "As mentioned above, there is an existing function to add a line to a plot --- `ax.axline()` --- but knowing how to write such functions empowers us to create more expressive displays.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1a083307",
      "metadata": {
        "id": "1a083307"
      },
      "source": [
        "Next we examine some diagnostic plots, several of which were discussed\n",
        "in Section~\\ref{Ch3:problems.sec}.\n",
        "We can find the fitted values and residuals\n",
        "of the fit as attributes of the `results` object.\n",
        "Various influence measures describing the regression model\n",
        "are computed with the `get_influence()` method.\n",
        "As we will not use the `fig` component returned\n",
        "as the first value from `subplots()`, we simply\n",
        "capture the second returned value in `ax` below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "id": "74be2100",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.180863Z",
          "iopub.status.busy": "2024-06-04T23:19:08.180691Z",
          "iopub.status.idle": "2024-06-04T23:19:08.331926Z",
          "shell.execute_reply": "2024-06-04T23:19:08.331152Z"
        },
        "lines_to_next_cell": 0,
        "id": "74be2100",
        "outputId": "146f6087-399c-465a-cb63-e565f7a68063",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "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jCwqSGSzyAQMdImIiMhRUlNcWDC5GAA6BLvyzwsmF7OebhJgoEtERESOU1ZSiKevGwGPOzQ9wePOxNPXjWAd3STBBSOIiIjIkcpKCjG+2MOV0ZIYA10iIiJyrNQUF0oHdjW7GWQSpi4QERERkSMx0CUiIiIiR2KgS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6RERERORIDHSJiIiIyJEY6BIRERGRIzHQJSIiIiJHYqBLRERERI7EQJeIiIiIHImBLhERERE5EgNdIiIiInIkBrpERERE5EgMdImIiIjIkRjoEhEREZEjMdAlIiIiIkdioEtEREREjtTJ7AYQERERJQufX8KWmgYcONKMHrmZGFlUgNQUl9nNciwGukREREQJUF5Vi0Wvb0ettznwWKE7EwsmF6OspNDEljkXUxeIiIiIDFZeVYvbVmwLCXIBoM7bjNtWbEN5Va1JLXM2BrpEREREBvL5JSx6fTukCL+TH1v0+nb4/JG2oHgw0CUiIiIy0Jaahg49ucEkALXeZmypaUhco5KEbQLdJUuW4Nxzz0Vubi569OiBqVOn4vPPPw/Zprm5GbNmzULXrl3RuXNnXH311di/f79JLSYiIiICDhxRDnK1bEfibBPovv3225g1axY2b96MdevWoa2tDZdddhmampoC28yZMwevv/46XnzxRbz99tvYt28frrrqKhNbTURERE7l80uoqK7Hmsq9qKiuV0w96JGbKfR83TpnCD0fiXNJkmTLvfjtt9+iR48eePvtt3HhhRfC6/Wie/fuWLlyJb7//e8DAD777DMMHjwYFRUVGD16tNDzNjY2wu12w+v1Ii8vz8i3QERERDalpoKCzy/h/Ec3oM7bHDFP1wUgPzsNGZ1SUNfYEvP5SDxes02Pbjiv1wsAKCgoAABs3boVbW1tGDduXGCbM844A3379kVFRYXi87S0tKCxsTHkHxEREZEStRUUUlNcWDC5GEB7UBvMhfYc3UPH2kKC3GjPR+JsGej6/X7ceeedGDNmDEpKSgAAdXV1SE9PR35+fsi2PXv2RF1dneJzLVmyBG63O/CvT58+RjadiIiIbExrBYWykkI8fd0IeNyhaQwedybys9Mivpb03b+fv1KF1hP+uNuejGy5YMSsWbNQVVWFTZs2xf1c8+bNw1133RX4ubGxkcEuERERRaSm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iYEuGaK8qrZDbb1Ci9XWIyIiImdj6gLprryqFret2BYS5AJAnbcZt63YhvKqWpNaRkRE5Aw+v4SK6nqsqdyLiup6+Pxc6DYS9uiSrnx+CYte345Ip5uE9qUBF72+HeOLPUxjICIi0oCjpuLYo0u62lLT0KEnN5gEoNbbjC01DYlrFBERkUNw1FQdBrqkqwNHlINcLdsRERFRu1ijpkD7qCnTGE5ioEu66pGbqet2RERE1I6jpuox0CVdjSwqQKE7E0rZty605xGNLCpIZLOIiIhsj6Om6jHQJV2lpriwYHIxAHQIduWfF0wu5kQ0IiJKKCdUKeCoqXqsumAipy6oUFZSiKevG9FhRqiHM0KJiMgETqlSII+a1nmbI+bputD+XctR05NckiTZ75bGQI2NjXC73fB6vcjLyzPsdZxy0kXj1ECeiIjsQ65SEB7syN9GT183wlbfu/L7ARDynuz6frQSjdcY6IZJRKDrtJOOiIjIinx+Cec/ukFxApfcA7pp7lhbdcQkQ2dZLKLxGlMXEowLKhARESWGmioFpQO7Jq5hcSorKcT4Yg9HTQUw0E0wp550REREVuPkKgWpKS7GCQJYdSHBnHzSERERWQmrFJCtAt133nkHkydPRq9eveByufDqq6+G/H7GjBlwuVwh/8rKysxprAKedERERInB2u5kq0C3qakJw4YNw9KlSxW3KSsrQ21tbeDfqlWrEtjC2HjSERERJQZru5OtcnQnTJiACRMmRN0mIyMDHo8nQS1STz7pbluxDS5ELg3Ck46IiEgfrO2e3GwV6Ip466230KNHD3Tp0gVjx47FQw89hK5dlZO1W1pa0NLSEvi5sbHR8DbypCMiIkocVilIXo4KdMvKynDVVVehqKgI1dXV+NnPfoYJEyagoqICqampEf9myZIlWLRoUYJbypOOiIgokVilIDnZdsEIl8uFV155BVOnTlXc5ssvv8TAgQOxfv16XHrppRG3idSj26dPH8NXRiMiIiIibUQXjLDVZDS1BgwYgG7dumHXrl2K22RkZCAvLy/kHxERERHZn6NSF8J98803qK+vR2Ehc16JiIjImXx+iamQCmwV6B49ejSkd7ampgaVlZUoKChAQUEBFi1ahKuvvhoejwfV1dW47777MGjQIFx++eUmtpqIiIjIGOVVtR0mtxdycnuArXJ033rrLVxyySUd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SBTM1Bzdu+++GzNmzIi6zYABA4Sey+PxYMuWLSGP7d+/P/A7JRkZGcjIyBB6DSIiSi5y4BVeSsuTpHV09SzdpiTeSYREwUwNdLt3747u3bvr8lylpaX45S9/iQMHDqBHjx4AgHXr1iEvLw/FxcW6vAYRESUfBl6hEhH8xzOJkCiYbaou7NmzBw0NDdizZw98Ph8qKysBAIMGDULnzp1x2WWXobi4GP/7v/+Lxx57DHV1dXjggQcwa9Ys9tgSEVFcGHiFYvBPduGSJMkWla5nzJiBP//5zx0e37hxIy6++GIAwFdffYXbbrsNb731FnJycnDDDTfgkUceQadO4vF8Y2Mj3G43vF4v8vLy9Go+EREREelENF6zTaCbKAx0iYiIiKxNNF5zTHkxIiIiIqJgDHSJiIiIyJEY6BIRERGRIzHQJSIiIiJHYqBLRERERI7EQJeIiIiIHImBLhERERE5EgNdIiIiInIkBrpERERE5EgMdImIiIjIkRjoEhEREZEjMdAlIiIiIkdioEtEREREjsRAl4iIiIgciYEuERERETkSA10iIiIiciQGukRERETkSAx0iYiIiMiRGOgSERERkSMx0CUiIiIiR2KgS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6RERERORIDHSJiIiIyJEY6BIRERGRIzHQJSIiIiJHYqBLRERERI7EQJeIiIiIHImBLhERERE5EgNdIiIiInIkBrpERERE5EgMdImIiIjIkRjoEhEREZEjMdAlIiIiIkdioEtEREREjsRAl4iIiIgciYEuERERETkSA10iIiIiciQGukRERETkSAx0iYiIiMiRGOgSERERkSMx0CUiIiIiR2KgS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6RERERORIDHSJiIiIyJEY6BIRERGRIzHQJSIiIiJHYqBLRERERI7EQJeIiIiIHImBLhERERE5EgNdIiIiInIkBrpERERE5EgMdImIiIjIkRjoEhEREZEj2SbQ/eUvf4nzzjsP2dnZyM/Pj7iNy+Xq8G/16tWJbSgRERERWUInsxsgqrW1FT/4wQ9QWlqKP/3pT4rbLV++HGVlZYGflYJiIiIiInI22wS6ixYtAgA8//zzUbfLz8+Hx+NJQIuIiIjICnx+CVtqGnDgSDN65GZiZFEBUlNcZjeLLMA2ga6oWbNm4eabb8aAAQNw66234sYbb4TLpXywt7S0oKWlJfBzY2NjIppJREREOiivqsWi17ej1tsceKzQnYkFk4tRVlJoYsvICmyToyviF7/4Bf7+979j3bp1uPrqq3H77bfjd7/7XdS/WbJkCdxud+Bfnz59EtRaIiIiikd5VS1uW7EtJMgFgDpvM25bsQ3lVbUmtYyswtRA9/777484gSz432effSb8fPPnz8eYMWNw1llnYe7cubjvvvvwq1/9KurfzJs3D16vN/Dv66+/jvdtERERkcF8fgmLXt8OKcLv5McWvb4dPn+kLShZmJq6cPfdd2PGjBlRtxkwYIDm5x81ahQWL16MlpYWZGRkRNwmIyND8XdERERkTVtqGjr05AaTANR6m7GlpgGlA7smrmFkKaYGut27d0f37t0Ne/7Kykp06dKFgSwREZHDHDiiHORq2Y6cyTaT0fbs2YOGhgbs2bMHPp8PlZWVAIBBgwahc+fOeP3117F//36MHj0amZmZWLduHR5++GHcc8895jaciIiIdNcjN1PX7ciZbBPoPvjgg/jzn/8c+Pmss84CAGzcuBEXX3wx0tLSsHTpUsyZMweSJGHQoEH4zW9+g5kzZ5rVZCIiIjLIyKICFLozUedtjpin6wLgcbeXGqPk5ZIkiVnaQRobG+F2u+H1epGXl2d2c4iIiEiBXHUBQEiwKxcVffq6ESwx5lCi8ZqjyosRERFR8igrKcTT142Axx2anuBxZzLIJQA2Sl0gIiIiCldWUojxxR6ujEYRMdAlIiIiW0tNcbGEGEXE1AUiIiIiciQGukRERETkSAx0iYiIiMiRGOgSERERkSMx0CUiIiIiR2KgS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6RERERORIDHSJiIiIyJEY6BIRERGRIzHQJSIiIiJHYqBLRERERI7EQJeIiIiIHImBLhERERE5EgNdIiIiInIkBrpERERE5EgMdImIiIjIkRjoEhEREZEjdTK7AVYjSRIAoLGx0eSWEBEREVEkcpwmx21KGOiGOXLkCACgT58+JreEiIiIiKI5cuQI3G634u9dUqxQOMn4/X7s27cPubm5cLlcZjdHF42NjejTpw++/vpr5OXlmd0cW+I+1Af3oz64H/XB/agP7kd9cD+qI0kSjhw5gl69eiElRTkTlz26YVJSUnDKKaeY3QxD5OXl8eSJE/ehPrgf9cH9qA/uR31wP+qD+1FctJ5cGSejEREREZEjMdAlIiIiIkdioJsEMjIysGDBAmRkZJjdFNviPtQH96M+uB/1wf2oD+5HfXA/GoOT0YiIiIjIkdijS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6Drd06VL0798fmZmZGDVqFLZs2WJ2k2xl4cKFcLlcIf/OOOMMs5tlee+88w4mT56MXr16weVy4dVXXw35vSRJePDBB1FYWIisrCyMGzcOO3fuNKexFhZrP86YMaPD8VlWVmZOYy1qyZIlOPfcc5Gbm4sePXpg6tSp+Pzzz0O2aW5uxqxZs9C1a1d07twZV199Nfbv329Si61JZD9efPHFHY7HW2+91aQWW9PTTz+NoUOHBhaFKC0txb/+9a/A73ks6o+BroP97W9/w1133YUFCxZg27ZtGDZsGC6//HIcOHDA7KbZyplnnona2trAv02bNpndJMtramrCsGHDsHTp0oi/f+yxx/Db3/4WzzzzDN5//33k5OTg8ssvR3Nzc4Jbam2x9iMAlJWVhRyfq1atSmALre/tt9/GrFmzsHnzZqxbtw5tbW247LLL0NTUFNhmzpw5eP311/Hiiy/i7bffxr59+3DVVVeZ2GrrEdmPADBz5syQ4/Gxxx4zqcXWdMopp+CRRx7B1q1b8cEHH2Ds2LGYMmUKPv30UwA8Fg0hkWONHDlSmjVrVuBnn88n9erVS1qyZImJrbKXBQsWSMOGDTO7GbYGQHrllVcCP/v9fsnj8Ui/+tWvAo8dPnxYysjIkFatWmVCC+0hfD9KkiTdcMMN0pQpU0xpj10dOHBAAiC9/fbbkiS1H3tpaWnSiy++GNhmx44dEgCpoqLCrGZaXvh+lCRJuuiii6Q77rjDvEbZVJcuXaQ//vGPPBYNwh5dh2ptbcXWrVsxbty4wGMpKSkYN24cKioqTGyZ/ezcuRO9evXCgAEDcO2112LPnj1mN8nWampqUFdXF3Jsut1ujBo1isemBm+99RZ69OiB008/Hbfddhvq6+vNbpKleb1eAEBBQQEAYOvWrWhraws5Hs844wz07duXx2MU4ftR9sILL6Bbt24oKSnBvHnzcOzYMTOaZws+nw+rV69GU1MTSktLeSwapJPZDSBjHDx4ED6fDz179gx5vGfPnvjss89MapX9jBo1Cs8//zxOP/101NbWYtGiRbjgggtQVVWF3Nxcs5tnS3V1dQAQ8diUf0diysrKcNVVV6GoqAjV1dX42c9+hgkTJqCiogKpqalmN89y/H4/7rzzTowZMwYlJSUA2o/H9PR05Ofnh2zL41FZpP0IANdccw369euHXr164eOPP8bcuXPx+eef4+WXXzaxtdbzySefoLS0FM3NzejcuTNeeeUVFBcXo7KykseiARjoEkUxYcKEwP+HDh2KUaNGoV+/fvj73/+Om266ycSWEQHTpk0L/H/IkCEYOnQoBg4ciLfeeguXXnqpiS2zplmzZqGqqop59nFS2o+33HJL4P9DhgxBYWEhLr30UlRXV2PgwIGJbqZlnX766aisrITX68U//vEP3HDDDXj77bfNbpZjMXXBobp164bU1NQOszX3798Pj8djUqvsLz8/H6eddhp27dpldlNsSz7+eGzqb8CAAejWrRuPzwhmz56NN954Axs3bsQpp5wSeNzj8aC1tRWHDx8O2Z7HY2RK+zGSUaNGAQCPxzDp6ekYNGgQzj77bCxZsgTDhg3Dk08+yWPRIAx0HSo9PR1nn3023nzzzcBjfr8fb775JkpLS01smb0dPXoU1dXVKCwsNLsptlVUVASPxxNybDY2NuL999/nsRmnb775BvX19Tw+g0iShNmzZ+OVV17Bhg0bUFRUFPL7s88+G2lpaSHH4+eff449e/bweAwSaz9GUllZCQA8HmPw+/1oaWnhsWgQpi442F133YUbbrgB55xzDkaOHIknnngCTU1NuPHGG81umm3cc889mDx5Mvr164d9+/ZhwYIFSE1NxfTp081umqUdPXo0pBenpqYGlZWVKCgoQN++fXHnnXfioYcewqmnnoqioiLMnz8fvXr1wtSpU81rtAVF248FBQVYtGgRrr76ang8HlRXV+O+++7DoEGDcPnll5vYamuZNWsWVq5ciTVr1iA3NzeQ6+h2u5GVlQW3242bbroJd911FwoKCpCXl4ef/OQnKC0txejRo01uvXXE2o/V1dVYuXIlJk6ciK5du+Ljjz/GnDlzcOGFF2Lo0KEmt9465s2bhwkTJqBv3744cuQIVq5cibfeegv/7//9Px6LRjG77AMZ63e/+53Ut29fKT09XRo5cqS0efNms5tkKz/84Q+lwsJCKT09Xerdu7f0wx/+UNq1a5fZzbK8jRs3SgA6/LvhhhskSWovMTZ//nypZ8+eUkZGhnTppZdKn3/+ubmNtqBo+/HYsWPSZZddJnXv3l1KS0uT+vXrJ82cOVOqq6szu9mWEmn/AZCWL18e2Ob48ePS7bffLnXp0kXKzs6WrrzySqm2tta8RltQrP24Z88e6cILL5QKCgqkjIwMadCgQdK9994reb1ecxtuMT/60Y+kfv36Senp6VL37t2lSy+9VPr3v/8d+D2PRf25JEmSEhlYExERERElAnN0iYiIiMiRGOgSERERkSMx0CUiIiIiR2KgS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6REQGu/jii3HnnXcm7PWef/555OfnG/oab731FlwuFw4fPmzo6xARxYOBLhGRDmbMmAGXy9Xh365du/Dyyy9j8eLFgW379++PJ554IuTvExGcEhElm05mN4CIyCnKysqwfPnykMe6d++O1NRUk1pERJTc2KNLRKSTjIwMeDyekH+pqakhqQsXX3wxvvrqK8yZMyfQ6/vWW2/hxhtvhNfrDTy2cOFCAEBLSwvuuece9O7dGzk5ORg1ahTeeuutkNd9/vnn0bdvX2RnZ+PKK69EfX191Haed955mDt3bshj3377LdLS0vDOO+8AAP7617/inHPOQW5uLjweD6655hocOHBA8TkXLlyI4cOHhzz2xBNPoH///iGP/fGPf8TgwYORmZmJM844A7///e+jtpWIKB4MdImIEujll1/GKaecgl/84heora1FbW0tzjvvPDzxxBPIy8sLPHbPPfcAAGbPno2KigqsXr0aH3/8MX7wgx+grKwMO3fuBAC8//77uOmmmzB79mxUVlbikksuwUMPPRS1Dddeey1Wr14NSZICj/3tb39Dr169cMEFFwAA2trasHjxYnz00Ud49dVXsXv3bsyYMSOu9/7CCy/gwQcfxC9/+Uvs2LEDDz/8MObPn48///nPcT0vEZESpi4QEenkjTfeQOfOnQM/T5gwAS+++GLINgUFBUhNTQ30lMrcbjdcLlfIY3v27MHy5cuxZ88e9OrVCwBwzz33oLy8HMuXL8fDDz+MJ598EmVlZbjvvvsAAKeddhree+89lJeXK7bzf/7nf3DnnXdi06ZNgcB25cqVmD59OlwuFwDgRz/6UWD7AQMG4Le//S3OPfdcHD16NOQ9qrFgwQL83//9H6666ioAQFFREbZv345nn30WN9xwg6bnJCKKhoEuEZFOLrnkEjz99NOBn3NycuJ6vk8++QQ+nw+nnXZayOMtLS3o2rUrAGDHjh248sorQ35fWloaNdDt3r07LrvsMrzwwgu44IILUFNTg4qKCjz77LOBbbZu3YqFCxfio48+wqFDh+D3+wG0B9/FxcWq30tTUxOqq6tx0003YebMmYHHT5w4Abfbrfr5iIhEMNAlItJJTk4OBg0apNvzHT16FKmpqdi6dWuHCW1ae1Vl1157LX7605/id7/7HVauXIkhQ4ZgyJAhANqD0ssvvxyXX345XnjhBXTv3h179uzB5ZdfjtbW1ojPl5KSEpIKAbSnPwS/FwBYtmwZRo0aFbIdJ+sRkVEY6BIRJVh6ejp8Pl/Mx8466yz4fD4cOHAgkGIQbvDgwXj//fdDHtu8eXPMNkyZMgW33HILysvLsXLlSlx//fWB33322Weor6/HI488gj59+gAAPvjgg6jP1717d9TV1UGSpED6Q2VlZeD3PXv2RK9evfDll1/i2muvjdk+IiI9cDIaEVGC9e/fH++88w727t2LgwcPBh47evQo3nzzTRw8eBDHjh3DaaedhmuvvRbXX389Xn75ZdTU1GDLli1YsmQJ1q5dCwD46U9/ivLycvz617/Gzp078dRTT0VNW5Dl5ORg6tSpmD9/Pnbs2IHp06cHfte3b1+kp6fjd7/7Hb788ku89tprIXWAI7n44ovx7bff4rHHHkN1dTWWLl2Kf/3rXyHbLFq0CEuWLMFvf/tbfPHFF/jkk0+wfPly/OY3v1G7C4mIhDDQJSJKsF/84hfYvXs3Bg4ciO7duwNoL/l166234oc//CG6d++Oxx57DACwfPlyXH/99bj77rtx+umnY+rUqfjvf/+Lvn37AgBGjx6NZcuW4cknn8SwYcPw73//Gw888IBQO6699lp89NFHuOCCCwLPB7T3zj7//PN48cUXUVxcjEceeQS//vWvoz7X4MGD8fvf/x5Lly7FsGHDsGXLlkDlCNnNN9+MP/7xj1i+fDmGDBmCiy66CM8//zyKioqE9x0RkRouKTypioiIiIjIAdijS0RERESOxECXiIiIiByJgS4RERERORIDXSIiIiJyJAa6RERERORIDHSJiIiIyJEY6BIRERGRIzHQJSIiIiJHYqBLRERERI7EQJeIiIiIHImBLhERERE5EgNdIiIiInKk/w8XLziAu4NPdwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "ax = subplots(figsize=(8,8))[1]\n",
        "ax.scatter(results.fittedvalues, results.resid)\n",
        "ax.set_xlabel('Fitted value')\n",
        "ax.set_ylabel('Residual')\n",
        "ax.axhline(0, c='k', ls='--');\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c00db5a1",
      "metadata": {
        "id": "c00db5a1"
      },
      "source": [
        " We add a horizontal line at 0 for reference using the\n",
        " `ax.axhline()`   method, indicating\n",
        "it should be black (`c='k'`) and have a dashed linestyle (`ls='--'`).\n",
        "\n",
        "On the basis of the residual plot, there is some evidence of non-linearity.\n",
        "Leverage statistics can be computed for any number of predictors using the\n",
        "`hat_matrix_diag` attribute of the value returned by the\n",
        "`get_influence()`  method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "id": "db8bc925",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.334603Z",
          "iopub.status.busy": "2024-06-04T23:19:08.334424Z",
          "iopub.status.idle": "2024-06-04T23:19:08.403949Z",
          "shell.execute_reply": "2024-06-04T23:19:08.403703Z"
        },
        "lines_to_next_cell": 0,
        "id": "db8bc925",
        "outputId": "cbbc4905-c6a5-48e4-bedc-7fcfb0e47e56",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 713
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "374"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "infl = results.get_influence()\n",
        "ax = subplots(figsize=(8,8))[1]\n",
        "ax.scatter(np.arange(X.shape[0]), infl.hat_matrix_diag)\n",
        "ax.set_xlabel('Index')\n",
        "ax.set_ylabel('Leverage')\n",
        "np.argmax(infl.hat_matrix_diag)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4e7aa0bb",
      "metadata": {
        "id": "4e7aa0bb"
      },
      "source": [
        " The `np.argmax()`  function identifies the index of the largest element of an array, optionally computed over an axis of the array.\n",
        "In this case, we maximized over the entire array\n",
        "to determine which observation has the largest leverage statistic."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e98db373",
      "metadata": {
        "id": "e98db373"
      },
      "source": [
        "## Multiple Linear Regression\n",
        "In order to fit a multiple linear regression model using least squares, we again use\n",
        "the `ModelSpec()`  transform to construct the required\n",
        "model matrix and response. The arguments\n",
        "to `ModelSpec()` can be quite general, but in this case\n",
        "a list of column names suffice. We consider a fit here with\n",
        "the two variables `lstat` and `age`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "id": "e479373c",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.405606Z",
          "iopub.status.busy": "2024-06-04T23:19:08.405477Z",
          "iopub.status.idle": "2024-06-04T23:19:08.415531Z",
          "shell.execute_reply": "2024-06-04T23:19:08.415300Z"
        },
        "lines_to_next_cell": 0,
        "id": "e479373c",
        "outputId": "acff4d2b-f937-43fd-df7e-231b8cf9a2c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: xlabel='crim', ylabel='crim'>,\n",
              "        <Axes: xlabel='zn', ylabel='crim'>,\n",
              "        <Axes: xlabel='indus', ylabel='crim'>,\n",
              "        <Axes: xlabel='chas', ylabel='crim'>,\n",
              "        <Axes: xlabel='nox', ylabel='crim'>,\n",
              "        <Axes: xlabel='rm', ylabel='crim'>,\n",
              "        <Axes: xlabel='age', ylabel='crim'>,\n",
              "        <Axes: xlabel='dis', ylabel='crim'>,\n",
              "        <Axes: xlabel='rad', ylabel='crim'>,\n",
              "        <Axes: xlabel='tax', ylabel='crim'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='crim'>,\n",
              "        <Axes: xlabel='lstat', ylabel='crim'>,\n",
              "        <Axes: xlabel='medv', ylabel='crim'>],\n",
              "       [<Axes: xlabel='crim', ylabel='zn'>,\n",
              "        <Axes: xlabel='zn', ylabel='zn'>,\n",
              "        <Axes: xlabel='indus', ylabel='zn'>,\n",
              "        <Axes: xlabel='chas', ylabel='zn'>,\n",
              "        <Axes: xlabel='nox', ylabel='zn'>,\n",
              "        <Axes: xlabel='rm', ylabel='zn'>,\n",
              "        <Axes: xlabel='age', ylabel='zn'>,\n",
              "        <Axes: xlabel='dis', ylabel='zn'>,\n",
              "        <Axes: xlabel='rad', ylabel='zn'>,\n",
              "        <Axes: xlabel='tax', ylabel='zn'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='zn'>,\n",
              "        <Axes: xlabel='lstat', ylabel='zn'>,\n",
              "        <Axes: xlabel='medv', ylabel='zn'>],\n",
              "       [<Axes: xlabel='crim', ylabel='indus'>,\n",
              "        <Axes: xlabel='zn', ylabel='indus'>,\n",
              "        <Axes: xlabel='indus', ylabel='indus'>,\n",
              "        <Axes: xlabel='chas', ylabel='indus'>,\n",
              "        <Axes: xlabel='nox', ylabel='indus'>,\n",
              "        <Axes: xlabel='rm', ylabel='indus'>,\n",
              "        <Axes: xlabel='age', ylabel='indus'>,\n",
              "        <Axes: xlabel='dis', ylabel='indus'>,\n",
              "        <Axes: xlabel='rad', ylabel='indus'>,\n",
              "        <Axes: xlabel='tax', ylabel='indus'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='indus'>,\n",
              "        <Axes: xlabel='lstat', ylabel='indus'>,\n",
              "        <Axes: xlabel='medv', ylabel='indus'>],\n",
              "       [<Axes: xlabel='crim', ylabel='chas'>,\n",
              "        <Axes: xlabel='zn', ylabel='chas'>,\n",
              "        <Axes: xlabel='indus', ylabel='chas'>,\n",
              "        <Axes: xlabel='chas', ylabel='chas'>,\n",
              "        <Axes: xlabel='nox', ylabel='chas'>,\n",
              "        <Axes: xlabel='rm', ylabel='chas'>,\n",
              "        <Axes: xlabel='age', ylabel='chas'>,\n",
              "        <Axes: xlabel='dis', ylabel='chas'>,\n",
              "        <Axes: xlabel='rad', ylabel='chas'>,\n",
              "        <Axes: xlabel='tax', ylabel='chas'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='chas'>,\n",
              "        <Axes: xlabel='lstat', ylabel='chas'>,\n",
              "        <Axes: xlabel='medv', ylabel='chas'>],\n",
              "       [<Axes: xlabel='crim', ylabel='nox'>,\n",
              "        <Axes: xlabel='zn', ylabel='nox'>,\n",
              "        <Axes: xlabel='indus', ylabel='nox'>,\n",
              "        <Axes: xlabel='chas', ylabel='nox'>,\n",
              "        <Axes: xlabel='nox', ylabel='nox'>,\n",
              "        <Axes: xlabel='rm', ylabel='nox'>,\n",
              "        <Axes: xlabel='age', ylabel='nox'>,\n",
              "        <Axes: xlabel='dis', ylabel='nox'>,\n",
              "        <Axes: xlabel='rad', ylabel='nox'>,\n",
              "        <Axes: xlabel='tax', ylabel='nox'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='nox'>,\n",
              "        <Axes: xlabel='lstat', ylabel='nox'>,\n",
              "        <Axes: xlabel='medv', ylabel='nox'>],\n",
              "       [<Axes: xlabel='crim', ylabel='rm'>,\n",
              "        <Axes: xlabel='zn', ylabel='rm'>,\n",
              "        <Axes: xlabel='indus', ylabel='rm'>,\n",
              "        <Axes: xlabel='chas', ylabel='rm'>,\n",
              "        <Axes: xlabel='nox', ylabel='rm'>,\n",
              "        <Axes: xlabel='rm', ylabel='rm'>,\n",
              "        <Axes: xlabel='age', ylabel='rm'>,\n",
              "        <Axes: xlabel='dis', ylabel='rm'>,\n",
              "        <Axes: xlabel='rad', ylabel='rm'>,\n",
              "        <Axes: xlabel='tax', ylabel='rm'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='rm'>,\n",
              "        <Axes: xlabel='lstat', ylabel='rm'>,\n",
              "        <Axes: xlabel='medv', ylabel='rm'>],\n",
              "       [<Axes: xlabel='crim', ylabel='age'>,\n",
              "        <Axes: xlabel='zn', ylabel='age'>,\n",
              "        <Axes: xlabel='indus', ylabel='age'>,\n",
              "        <Axes: xlabel='chas', ylabel='age'>,\n",
              "        <Axes: xlabel='nox', ylabel='age'>,\n",
              "        <Axes: xlabel='rm', ylabel='age'>,\n",
              "        <Axes: xlabel='age', ylabel='age'>,\n",
              "        <Axes: xlabel='dis', ylabel='age'>,\n",
              "        <Axes: xlabel='rad', ylabel='age'>,\n",
              "        <Axes: xlabel='tax', ylabel='age'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='age'>,\n",
              "        <Axes: xlabel='lstat', ylabel='age'>,\n",
              "        <Axes: xlabel='medv', ylabel='age'>],\n",
              "       [<Axes: xlabel='crim', ylabel='dis'>,\n",
              "        <Axes: xlabel='zn', ylabel='dis'>,\n",
              "        <Axes: xlabel='indus', ylabel='dis'>,\n",
              "        <Axes: xlabel='chas', ylabel='dis'>,\n",
              "        <Axes: xlabel='nox', ylabel='dis'>,\n",
              "        <Axes: xlabel='rm', ylabel='dis'>,\n",
              "        <Axes: xlabel='age', ylabel='dis'>,\n",
              "        <Axes: xlabel='dis', ylabel='dis'>,\n",
              "        <Axes: xlabel='rad', ylabel='dis'>,\n",
              "        <Axes: xlabel='tax', ylabel='dis'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='dis'>,\n",
              "        <Axes: xlabel='lstat', ylabel='dis'>,\n",
              "        <Axes: xlabel='medv', ylabel='dis'>],\n",
              "       [<Axes: xlabel='crim', ylabel='rad'>,\n",
              "        <Axes: xlabel='zn', ylabel='rad'>,\n",
              "        <Axes: xlabel='indus', ylabel='rad'>,\n",
              "        <Axes: xlabel='chas', ylabel='rad'>,\n",
              "        <Axes: xlabel='nox', ylabel='rad'>,\n",
              "        <Axes: xlabel='rm', ylabel='rad'>,\n",
              "        <Axes: xlabel='age', ylabel='rad'>,\n",
              "        <Axes: xlabel='dis', ylabel='rad'>,\n",
              "        <Axes: xlabel='rad', ylabel='rad'>,\n",
              "        <Axes: xlabel='tax', ylabel='rad'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='rad'>,\n",
              "        <Axes: xlabel='lstat', ylabel='rad'>,\n",
              "        <Axes: xlabel='medv', ylabel='rad'>],\n",
              "       [<Axes: xlabel='crim', ylabel='tax'>,\n",
              "        <Axes: xlabel='zn', ylabel='tax'>,\n",
              "        <Axes: xlabel='indus', ylabel='tax'>,\n",
              "        <Axes: xlabel='chas', ylabel='tax'>,\n",
              "        <Axes: xlabel='nox', ylabel='tax'>,\n",
              "        <Axes: xlabel='rm', ylabel='tax'>,\n",
              "        <Axes: xlabel='age', ylabel='tax'>,\n",
              "        <Axes: xlabel='dis', ylabel='tax'>,\n",
              "        <Axes: xlabel='rad', ylabel='tax'>,\n",
              "        <Axes: xlabel='tax', ylabel='tax'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='tax'>,\n",
              "        <Axes: xlabel='lstat', ylabel='tax'>,\n",
              "        <Axes: xlabel='medv', ylabel='tax'>],\n",
              "       [<Axes: xlabel='crim', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='zn', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='indus', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='chas', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='nox', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='rm', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='age', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='dis', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='rad', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='tax', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='lstat', ylabel='ptratio'>,\n",
              "        <Axes: xlabel='medv', ylabel='ptratio'>],\n",
              "       [<Axes: xlabel='crim', ylabel='lstat'>,\n",
              "        <Axes: xlabel='zn', ylabel='lstat'>,\n",
              "        <Axes: xlabel='indus', ylabel='lstat'>,\n",
              "        <Axes: xlabel='chas', ylabel='lstat'>,\n",
              "        <Axes: xlabel='nox', ylabel='lstat'>,\n",
              "        <Axes: xlabel='rm', ylabel='lstat'>,\n",
              "        <Axes: xlabel='age', ylabel='lstat'>,\n",
              "        <Axes: xlabel='dis', ylabel='lstat'>,\n",
              "        <Axes: xlabel='rad', ylabel='lstat'>,\n",
              "        <Axes: xlabel='tax', ylabel='lstat'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='lstat'>,\n",
              "        <Axes: xlabel='lstat', ylabel='lstat'>,\n",
              "        <Axes: xlabel='medv', ylabel='lstat'>],\n",
              "       [<Axes: xlabel='crim', ylabel='medv'>,\n",
              "        <Axes: xlabel='zn', ylabel='medv'>,\n",
              "        <Axes: xlabel='indus', ylabel='medv'>,\n",
              "        <Axes: xlabel='chas', ylabel='medv'>,\n",
              "        <Axes: xlabel='nox', ylabel='medv'>,\n",
              "        <Axes: xlabel='rm', ylabel='medv'>,\n",
              "        <Axes: xlabel='age', ylabel='medv'>,\n",
              "        <Axes: xlabel='dis', ylabel='medv'>,\n",
              "        <Axes: xlabel='rad', ylabel='medv'>,\n",
              "        <Axes: xlabel='tax', ylabel='medv'>,\n",
              "        <Axes: xlabel='ptratio', ylabel='medv'>,\n",
              "        <Axes: xlabel='lstat', ylabel='medv'>,\n",
              "        <Axes: xlabel='medv', ylabel='medv'>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 56
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 169 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "X = MS(['lstat', 'age']).fit_transform(Boston)\n",
        "model1 = sm.OLS(y, X)\n",
        "results1 = model1.fit()\n",
        "summarize(results1)\n",
        "from pandas.plotting import scatter_matrix\n",
        "scatter_matrix(Boston,figsize=(8,8),diagonal= 'hist',alpha=0.7)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5c79b00d",
      "metadata": {
        "id": "5c79b00d"
      },
      "source": [
        "Notice how we have compacted the first line into a succinct expression describing the construction of `X`.\n",
        "\n",
        "The  `Boston`   data set contains 12 variables, and so it would be cumbersome\n",
        "to have to type all of these in order to perform a regression using all of the predictors.\n",
        "Instead, we can use the following short-hand:\\definelongblankMR{columns.drop()}{columns.slashslashdrop()}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "id": "b903170c",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.416871Z",
          "iopub.status.busy": "2024-06-04T23:19:08.416798Z",
          "iopub.status.idle": "2024-06-04T23:19:08.418929Z",
          "shell.execute_reply": "2024-06-04T23:19:08.418717Z"
        },
        "id": "b903170c",
        "outputId": "758968c9-9823-497b-858f-2e5a1c0a0e31",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax',\n",
              "       'ptratio', 'lstat'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "terms = Boston.columns.drop('medv')\n",
        "terms\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "179b7846",
      "metadata": {
        "id": "179b7846"
      },
      "source": [
        "We can now fit the model with all the variables in `terms` using\n",
        "the same model matrix builder."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "id": "bbe47670",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.420168Z",
          "iopub.status.busy": "2024-06-04T23:19:08.420092Z",
          "iopub.status.idle": "2024-06-04T23:19:08.434050Z",
          "shell.execute_reply": "2024-06-04T23:19:08.433809Z"
        },
        "id": "bbe47670",
        "outputId": "595cbb71-7074-4155-e41d-71d853331569",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              coef  std err       t  P>|t|\n",
              "intercept  41.6173    4.936   8.431  0.000\n",
              "crim       -0.1214    0.033  -3.678  0.000\n",
              "zn          0.0470    0.014   3.384  0.001\n",
              "indus       0.0135    0.062   0.217  0.829\n",
              "chas        2.8400    0.870   3.264  0.001\n",
              "nox       -18.7580    3.851  -4.870  0.000\n",
              "rm          3.6581    0.420   8.705  0.000\n",
              "age         0.0036    0.013   0.271  0.787\n",
              "dis        -1.4908    0.202  -7.394  0.000\n",
              "rad         0.2894    0.067   4.325  0.000\n",
              "tax        -0.0127    0.004  -3.337  0.001\n",
              "ptratio    -0.9375    0.132  -7.091  0.000\n",
              "lstat      -0.5520    0.051 -10.897  0.000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6992e394-63ec-4710-a62a-6a8fa0af9245\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>41.6173</td>\n",
              "      <td>4.936</td>\n",
              "      <td>8.431</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crim</th>\n",
              "      <td>-0.1214</td>\n",
              "      <td>0.033</td>\n",
              "      <td>-3.678</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>zn</th>\n",
              "      <td>0.0470</td>\n",
              "      <td>0.014</td>\n",
              "      <td>3.384</td>\n",
              "      <td>0.001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>indus</th>\n",
              "      <td>0.0135</td>\n",
              "      <td>0.062</td>\n",
              "      <td>0.217</td>\n",
              "      <td>0.829</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chas</th>\n",
              "      <td>2.8400</td>\n",
              "      <td>0.870</td>\n",
              "      <td>3.264</td>\n",
              "      <td>0.001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nox</th>\n",
              "      <td>-18.7580</td>\n",
              "      <td>3.851</td>\n",
              "      <td>-4.870</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rm</th>\n",
              "      <td>3.6581</td>\n",
              "      <td>0.420</td>\n",
              "      <td>8.705</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.0036</td>\n",
              "      <td>0.013</td>\n",
              "      <td>0.271</td>\n",
              "      <td>0.787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dis</th>\n",
              "      <td>-1.4908</td>\n",
              "      <td>0.202</td>\n",
              "      <td>-7.394</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rad</th>\n",
              "      <td>0.2894</td>\n",
              "      <td>0.067</td>\n",
              "      <td>4.325</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tax</th>\n",
              "      <td>-0.0127</td>\n",
              "      <td>0.004</td>\n",
              "      <td>-3.337</td>\n",
              "      <td>0.001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ptratio</th>\n",
              "      <td>-0.9375</td>\n",
              "      <td>0.132</td>\n",
              "      <td>-7.091</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat</th>\n",
              "      <td>-0.5520</td>\n",
              "      <td>0.051</td>\n",
              "      <td>-10.897</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6992e394-63ec-4710-a62a-6a8fa0af9245')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6992e394-63ec-4710-a62a-6a8fa0af9245 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6992e394-63ec-4710-a62a-6a8fa0af9245');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e9f31cf-a87c-48eb-b790-2c19109d7e2c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e9f31cf-a87c-48eb-b790-2c19109d7e2c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e9f31cf-a87c-48eb-b790-2c19109d7e2c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"summarize(results)\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.084352293983715,\n        \"min\": -18.758,\n        \"max\": 41.6173,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -0.9375,\n          0.2894,\n          41.6173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6192906645844212,\n        \"min\": 0.004,\n        \"max\": 4.936,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.132,\n          0.067,\n          4.936\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.151464249287027,\n        \"min\": -10.897,\n        \"max\": 8.705,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -7.091,\n          4.325,\n          8.431\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3034503296490261,\n        \"min\": 0.0,\n        \"max\": 0.829,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.001,\n          0.787,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ],
      "source": [
        "X = MS(terms).fit_transform(Boston)\n",
        "model = sm.OLS(y, X)\n",
        "results = model.fit()\n",
        "summarize(results)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "183c3c40",
      "metadata": {
        "id": "183c3c40"
      },
      "source": [
        "What if we would like to perform a regression using all of the variables but one?  For\n",
        "example, in the above regression output,   `age`  has a high $p$-value.\n",
        "So we may wish to run a regression excluding this predictor.\n",
        "The following syntax results in a regression using all predictors except  `age`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "id": "a1484d00",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.435432Z",
          "iopub.status.busy": "2024-06-04T23:19:08.435353Z",
          "iopub.status.idle": "2024-06-04T23:19:08.448669Z",
          "shell.execute_reply": "2024-06-04T23:19:08.448429Z"
        },
        "id": "a1484d00",
        "outputId": "25f6c519-22a7-471c-b5be-fbdf8e88e509",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              coef  std err       t  P>|t|\n",
              "intercept  41.5251    4.920   8.441  0.000\n",
              "crim       -0.1214    0.033  -3.683  0.000\n",
              "zn          0.0465    0.014   3.379  0.001\n",
              "indus       0.0135    0.062   0.217  0.829\n",
              "chas        2.8528    0.868   3.287  0.001\n",
              "nox       -18.4851    3.714  -4.978  0.000\n",
              "rm          3.6811    0.411   8.951  0.000\n",
              "dis        -1.5068    0.193  -7.825  0.000\n",
              "rad         0.2879    0.067   4.322  0.000\n",
              "tax        -0.0127    0.004  -3.333  0.001\n",
              "ptratio    -0.9346    0.132  -7.099  0.000\n",
              "lstat      -0.5474    0.048 -11.483  0.000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c631455d-43de-473a-8eb9-1980b54153f8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>41.5251</td>\n",
              "      <td>4.920</td>\n",
              "      <td>8.441</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crim</th>\n",
              "      <td>-0.1214</td>\n",
              "      <td>0.033</td>\n",
              "      <td>-3.683</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>zn</th>\n",
              "      <td>0.0465</td>\n",
              "      <td>0.014</td>\n",
              "      <td>3.379</td>\n",
              "      <td>0.001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>indus</th>\n",
              "      <td>0.0135</td>\n",
              "      <td>0.062</td>\n",
              "      <td>0.217</td>\n",
              "      <td>0.829</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chas</th>\n",
              "      <td>2.8528</td>\n",
              "      <td>0.868</td>\n",
              "      <td>3.287</td>\n",
              "      <td>0.001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nox</th>\n",
              "      <td>-18.4851</td>\n",
              "      <td>3.714</td>\n",
              "      <td>-4.978</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rm</th>\n",
              "      <td>3.6811</td>\n",
              "      <td>0.411</td>\n",
              "      <td>8.951</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dis</th>\n",
              "      <td>-1.5068</td>\n",
              "      <td>0.193</td>\n",
              "      <td>-7.825</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rad</th>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.067</td>\n",
              "      <td>4.322</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tax</th>\n",
              "      <td>-0.0127</td>\n",
              "      <td>0.004</td>\n",
              "      <td>-3.333</td>\n",
              "      <td>0.001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ptratio</th>\n",
              "      <td>-0.9346</td>\n",
              "      <td>0.132</td>\n",
              "      <td>-7.099</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat</th>\n",
              "      <td>-0.5474</td>\n",
              "      <td>0.048</td>\n",
              "      <td>-11.483</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c631455d-43de-473a-8eb9-1980b54153f8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c631455d-43de-473a-8eb9-1980b54153f8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c631455d-43de-473a-8eb9-1980b54153f8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a513c77-11ba-418c-b8c2-eeb0e3a91b78\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a513c77-11ba-418c-b8c2-eeb0e3a91b78')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a513c77-11ba-418c-b8c2-eeb0e3a91b78 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"summarize(model1\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.589491586212578,\n        \"min\": -18.4851,\n        \"max\": 41.5251,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.9346,\n          -0.0127,\n          41.5251\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6476168924365957,\n        \"min\": 0.004,\n        \"max\": 4.92,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.132,\n          0.004,\n          4.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.58682827522266,\n        \"min\": -11.483,\n        \"max\": 8.951,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -7.099,\n          -3.333,\n          8.441\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23923337154461966,\n        \"min\": 0.0,\n        \"max\": 0.829,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          0.001,\n          0.829\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "minus_age = Boston.columns.drop(['medv', 'age'])\n",
        "Xma = MS(minus_age).fit_transform(Boston)\n",
        "model1 = sm.OLS(y, Xma)\n",
        "summarize(model1.fit())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "74ec4654",
      "metadata": {
        "id": "74ec4654"
      },
      "source": [
        "## Multivariate Goodness of Fit\n",
        "We can access the individual components of `results` by name\n",
        "(`dir(results)` shows us what is available). Hence\n",
        "`results.rsquared` gives us the $R^2$,\n",
        "and\n",
        "`np.sqrt(results.scale)` gives us the RSE.\n",
        "\n",
        "Variance inflation factors (section~\\ref{Ch3:problems.sec}) are sometimes useful\n",
        "to assess the effect of collinearity in the model matrix of a regression model.\n",
        "We will compute the VIFs in our multiple regression fit, and use the opportunity to introduce the idea of *list comprehension*.\n",
        "\n",
        "### List Comprehension\n",
        "Often we encounter a sequence of objects which we would like to transform\n",
        "for some other task. Below, we compute the VIF for each\n",
        "feature in our `X` matrix and produce a data frame\n",
        "whose index agrees with the columns of `X`.\n",
        "The notion of list comprehension can often make such\n",
        "a task easier.\n",
        "\n",
        "List comprehensions are simple and powerful ways to form\n",
        "lists of `Python` objects. The language also supports\n",
        "dictionary and *generator* comprehension, though these are\n",
        "beyond our scope here. Let's look at an example. We compute the VIF for each of the variables\n",
        "in the model matrix `X`, using the function `variance_inflation_factor()`.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "id": "46ac946c",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.449986Z",
          "iopub.status.busy": "2024-06-04T23:19:08.449918Z",
          "iopub.status.idle": "2024-06-04T23:19:08.455447Z",
          "shell.execute_reply": "2024-06-04T23:19:08.455211Z"
        },
        "lines_to_next_cell": 0,
        "id": "46ac946c",
        "outputId": "d6df2b69-304c-431c-fd86-923f1ebf6d4d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              vif\n",
              "crim     1.767486\n",
              "zn       2.298459\n",
              "indus    3.987181\n",
              "chas     1.071168\n",
              "nox      4.369093\n",
              "rm       1.912532\n",
              "age      3.088232\n",
              "dis      3.954037\n",
              "rad      7.445301\n",
              "tax      9.002158\n",
              "ptratio  1.797060\n",
              "lstat    2.870777"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bade2584-34bb-4a89-809f-10f98b5c3d96\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vif</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>crim</th>\n",
              "      <td>1.767486</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>zn</th>\n",
              "      <td>2.298459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>indus</th>\n",
              "      <td>3.987181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chas</th>\n",
              "      <td>1.071168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nox</th>\n",
              "      <td>4.369093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rm</th>\n",
              "      <td>1.912532</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>3.088232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dis</th>\n",
              "      <td>3.954037</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rad</th>\n",
              "      <td>7.445301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tax</th>\n",
              "      <td>9.002158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ptratio</th>\n",
              "      <td>1.797060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat</th>\n",
              "      <td>2.870777</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bade2584-34bb-4a89-809f-10f98b5c3d96')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bade2584-34bb-4a89-809f-10f98b5c3d96 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bade2584-34bb-4a89-809f-10f98b5c3d96');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4317abf5-c5cc-4a21-b233-53a6034776be\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4317abf5-c5cc-4a21-b233-53a6034776be')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4317abf5-c5cc-4a21-b233-53a6034776be button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ac6b1901-1b5e-4878-a783-3eedb0e5911b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('vif')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ac6b1901-1b5e-4878-a783-3eedb0e5911b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('vif');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "vif",
              "summary": "{\n  \"name\": \"vif\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"vif\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.396290949474654,\n        \"min\": 1.071167773758404,\n        \"max\": 9.002157663471797,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1.7970595931297786,\n          9.002157663471797,\n          1.7674859154310127\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "vals = [VIF(X, i)\n",
        "        for i in range(1, X.shape[1])]\n",
        "vif = pd.DataFrame({'vif':vals},\n",
        "                   index=X.columns[1:])\n",
        "vif\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "45a29903",
      "metadata": {
        "id": "45a29903"
      },
      "source": [
        "The function `VIF()` takes two arguments: a dataframe or array,\n",
        "and a variable column index. In the code above we call `VIF()` on the fly for all columns in `X`.  \n",
        "We have excluded column 0 above (the intercept), which is not of interest. In this case the VIFs are not that exciting.\n",
        "\n",
        "The object `vals` above could have been constructed with the following for loop:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "id": "b626ecb9",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.456814Z",
          "iopub.status.busy": "2024-06-04T23:19:08.456747Z",
          "iopub.status.idle": "2024-06-04T23:19:08.461039Z",
          "shell.execute_reply": "2024-06-04T23:19:08.460801Z"
        },
        "lines_to_next_cell": 0,
        "id": "b626ecb9"
      },
      "outputs": [],
      "source": [
        "vals = []\n",
        "for i in range(1, X.values.shape[1]):\n",
        "    vals.append(VIF(X.values, i))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6e504ae2",
      "metadata": {
        "id": "6e504ae2"
      },
      "source": [
        "List comprehension allows us to perform such repetitive operations in a more straightforward way.\n",
        "## Interaction Terms\n",
        "It is easy to include interaction terms in a linear model using `ModelSpec()`.\n",
        "Including a tuple `(\"lstat\",\"age\")` tells the model\n",
        "matrix builder to include an interaction term between\n",
        " `lstat`  and  `age`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "id": "8bf77477",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.462456Z",
          "iopub.status.busy": "2024-06-04T23:19:08.462383Z",
          "iopub.status.idle": "2024-06-04T23:19:08.473081Z",
          "shell.execute_reply": "2024-06-04T23:19:08.472857Z"
        },
        "lines_to_next_cell": 2,
        "id": "8bf77477",
        "outputId": "4b50f307-e6fd-4483-d2da-d73ef0214e26",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              coef  std err       t  P>|t|\n",
              "intercept  36.0885    1.470  24.553  0.000\n",
              "lstat      -1.3921    0.167  -8.313  0.000\n",
              "age        -0.0007    0.020  -0.036  0.971\n",
              "lstat:age   0.0042    0.002   2.244  0.025"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-94eee957-fe62-46fe-af39-02789f1fadb4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>36.0885</td>\n",
              "      <td>1.470</td>\n",
              "      <td>24.553</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat</th>\n",
              "      <td>-1.3921</td>\n",
              "      <td>0.167</td>\n",
              "      <td>-8.313</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>-0.0007</td>\n",
              "      <td>0.020</td>\n",
              "      <td>-0.036</td>\n",
              "      <td>0.971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lstat:age</th>\n",
              "      <td>0.0042</td>\n",
              "      <td>0.002</td>\n",
              "      <td>2.244</td>\n",
              "      <td>0.025</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94eee957-fe62-46fe-af39-02789f1fadb4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-94eee957-fe62-46fe-af39-02789f1fadb4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-94eee957-fe62-46fe-af39-02789f1fadb4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-10614b5d-cec0-464f-97c2-d45dd90f6625\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-10614b5d-cec0-464f-97c2-d45dd90f6625')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-10614b5d-cec0-464f-97c2-d45dd90f6625 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"summarize(model2\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.287491424354336,\n        \"min\": -1.3921,\n        \"max\": 36.0885,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -1.3921,\n          0.0042,\n          36.0885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7073713663981601,\n        \"min\": 0.002,\n        \"max\": 1.47,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.167,\n          0.002,\n          1.47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.046475643377596,\n        \"min\": -8.313,\n        \"max\": 24.553,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -8.313,\n          2.244,\n          24.553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4814775868788356,\n        \"min\": 0.0,\n        \"max\": 0.971,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          0.971,\n          0.025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ],
      "source": [
        "X = MS(['lstat',\n",
        "        'age',\n",
        "        ('lstat', 'age')]).fit_transform(Boston)\n",
        "model2 = sm.OLS(y, X)\n",
        "summarize(model2.fit())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e2323ab9",
      "metadata": {
        "id": "e2323ab9"
      },
      "source": [
        "## Non-linear Transformations of the Predictors\n",
        "The model matrix builder can include terms beyond\n",
        "just column names and interactions. For instance,\n",
        "the `poly()` function supplied in `ISLP` specifies that\n",
        "columns representing polynomial functions\n",
        "of its first argument are added to the model matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "id": "6289c3cb",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.474420Z",
          "iopub.status.busy": "2024-06-04T23:19:08.474348Z",
          "iopub.status.idle": "2024-06-04T23:19:08.484309Z",
          "shell.execute_reply": "2024-06-04T23:19:08.484088Z"
        },
        "lines_to_next_cell": 0,
        "id": "6289c3cb",
        "outputId": "3b31763e-8841-4ffc-f580-e476207ab300",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              coef  std err       t  P>|t|\n",
              "intercept                  17.7151    0.781  22.681    0.0\n",
              "poly(lstat, degree=2)[0] -179.2279    6.733 -26.620    0.0\n",
              "poly(lstat, degree=2)[1]   72.9908    5.482  13.315    0.0\n",
              "age                         0.0703    0.011   6.471    0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aadc3fb5-c932-461e-b14b-bbb6afed93e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>17.7151</td>\n",
              "      <td>0.781</td>\n",
              "      <td>22.681</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>poly(lstat, degree=2)[0]</th>\n",
              "      <td>-179.2279</td>\n",
              "      <td>6.733</td>\n",
              "      <td>-26.620</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>poly(lstat, degree=2)[1]</th>\n",
              "      <td>72.9908</td>\n",
              "      <td>5.482</td>\n",
              "      <td>13.315</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.0703</td>\n",
              "      <td>0.011</td>\n",
              "      <td>6.471</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aadc3fb5-c932-461e-b14b-bbb6afed93e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aadc3fb5-c932-461e-b14b-bbb6afed93e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aadc3fb5-c932-461e-b14b-bbb6afed93e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e2e9dc9-d4fa-4bc5-8ee9-330cd889b3a7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e2e9dc9-d4fa-4bc5-8ee9-330cd889b3a7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e2e9dc9-d4fa-4bc5-8ee9-330cd889b3a7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"summarize(results3)\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.2523087855622,\n        \"min\": -179.2279,\n        \"max\": 72.9908,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -179.2279,\n          0.0703,\n          17.7151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3516256130421245,\n        \"min\": 0.011,\n        \"max\": 6.733,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6.733,\n          0.011,\n          0.781\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.44320696436675,\n        \"min\": -26.62,\n        \"max\": 22.681,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -26.62,\n          6.471,\n          22.681\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "X = MS([poly('lstat', degree=2), 'age']).fit_transform(Boston)\n",
        "model3 = sm.OLS(y, X)\n",
        "results3 = model3.fit()\n",
        "summarize(results3)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2bd67b14",
      "metadata": {
        "id": "2bd67b14"
      },
      "source": [
        "The effectively zero *p*-value associated with the quadratic term\n",
        "(i.e. the third row above) suggests that it leads to an improved model.\n",
        "\n",
        "By default, `poly()` creates a basis matrix for inclusion in the\n",
        "model matrix whose\n",
        "columns are *orthogonal polynomials*, which are designed for stable\n",
        "least squares computations. {Actually, `poly()` is a  wrapper for the workhorse and standalone  function `Poly()` that does the  work in building the model matrix.}\n",
        "Alternatively, had we included an argument\n",
        "`raw=True` in the above call to `poly()`, the basis matrix would consist simply of\n",
        "`lstat` and `lstat**2`. Since either of these bases\n",
        "represent quadratic polynomials, the fitted values  would not\n",
        "change in this case, just the polynomial coefficients.  Also by default, the columns\n",
        "created by `poly()` do not include an intercept column as\n",
        "that is automatically added by `MS()`.\n",
        "\n",
        "We use the `anova_lm()` function to further quantify the extent to which the quadratic fit is\n",
        "superior to the linear fit."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "id": "b6542ac6",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.485627Z",
          "iopub.status.busy": "2024-06-04T23:19:08.485562Z",
          "iopub.status.idle": "2024-06-04T23:19:08.489875Z",
          "shell.execute_reply": "2024-06-04T23:19:08.489670Z"
        },
        "lines_to_next_cell": 0,
        "id": "b6542ac6",
        "outputId": "2f835131-5386-49cf-9a03-f3478961f580",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   df_resid           ssr  df_diff      ss_diff           F        Pr(>F)\n",
              "0     503.0  19168.128609      0.0          NaN         NaN           NaN\n",
              "1     502.0  14165.613251      1.0  5002.515357  177.278785  7.468491e-35"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66e6f56f-6e6d-4f53-9980-14b300357700\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df_resid</th>\n",
              "      <th>ssr</th>\n",
              "      <th>df_diff</th>\n",
              "      <th>ss_diff</th>\n",
              "      <th>F</th>\n",
              "      <th>Pr(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>503.0</td>\n",
              "      <td>19168.128609</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>502.0</td>\n",
              "      <td>14165.613251</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5002.515357</td>\n",
              "      <td>177.278785</td>\n",
              "      <td>7.468491e-35</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66e6f56f-6e6d-4f53-9980-14b300357700')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66e6f56f-6e6d-4f53-9980-14b300357700 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66e6f56f-6e6d-4f53-9980-14b300357700');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09266394-ab83-43a1-9c02-e78dd586115b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09266394-ab83-43a1-9c02-e78dd586115b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09266394-ab83-43a1-9c02-e78dd586115b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"anova_lm(results1, results3)\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df_resid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7071067811865476,\n        \"min\": 502.0,\n        \"max\": 503.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          502.0,\n          503.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ssr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3537.3125321669295,\n        \"min\": 14165.61325141803,\n        \"max\": 19168.128608760817,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          14165.61325141803,\n          19168.128608760817\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"df_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7071067811865476,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ss_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5002.515357342787,\n        \"max\": 5002.515357342787,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5002.515357342787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 177.27878523965015,\n        \"max\": 177.27878523965015,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          177.27878523965015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pr(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 7.468490926857876e-35,\n        \"max\": 7.468490926857876e-35,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7.468490926857876e-35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ],
      "source": [
        "anova_lm(results1, results3)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3685159a",
      "metadata": {
        "id": "3685159a"
      },
      "source": [
        "Here `results1` represents the linear submodel containing\n",
        "predictors `lstat` and `age`,\n",
        "while `results3` corresponds to the larger model above  with a quadratic\n",
        "term in `lstat`.\n",
        "The `anova_lm()` function performs a hypothesis test\n",
        "comparing the two models. The null hypothesis is that the quadratic\n",
        "term in the bigger model is not needed, and the alternative hypothesis is that the\n",
        "bigger model is superior. Here the *F*-statistic is 177.28 and\n",
        "the associated *p*-value is zero.\n",
        "In this case the *F*-statistic is the square of the\n",
        "*t*-statistic for the quadratic term in the linear model summary\n",
        "for `results3` --- a consequence of the fact that these nested\n",
        "models differ by one degree of freedom.\n",
        "This provides very clear evidence that the quadratic polynomial in\n",
        "`lstat` improves the linear model.\n",
        "This is not surprising, since earlier we saw evidence for non-linearity in the relationship between `medv`\n",
        "and  `lstat`.\n",
        "\n",
        "The function `anova_lm()` can take more than two nested models\n",
        "as input, in which case it compares every successive pair of models.\n",
        "That also explains why their are `NaN`s in the first row above, since\n",
        "there is no previous model with which to compare the first.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "id": "8e4c6004",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.491175Z",
          "iopub.status.busy": "2024-06-04T23:19:08.491086Z",
          "iopub.status.idle": "2024-06-04T23:19:08.560976Z",
          "shell.execute_reply": "2024-06-04T23:19:08.560698Z"
        },
        "lines_to_next_cell": 0,
        "id": "8e4c6004",
        "outputId": "f2784c2c-6c9f-43ad-d3b9-98acdffe9f59",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "ax = subplots(figsize=(8,8))[1]\n",
        "ax.scatter(results3.fittedvalues, results3.resid)\n",
        "ax.set_xlabel('Fitted value')\n",
        "ax.set_ylabel('Residual')\n",
        "ax.axhline(0, c='k', ls='--');\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3c7e0661",
      "metadata": {
        "id": "3c7e0661"
      },
      "source": [
        "We see that when the quadratic term is included in the model,\n",
        "there is little discernible pattern in the residuals.\n",
        "In order to create a cubic or higher-degree polynomial fit, we can simply change the degree argument\n",
        "to `poly()`.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "46a4967d",
      "metadata": {
        "id": "46a4967d"
      },
      "source": [
        "## Qualitative Predictors\n",
        "Here we use the  `Carseats`  data, which is included in the\n",
        "`ISLP` package. We will  attempt to predict `Sales`\n",
        "(child car seat sales) in 400 locations based on a number of\n",
        "predictors."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a83f4bd2",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.562367Z",
          "iopub.status.busy": "2024-06-04T23:19:08.562269Z",
          "iopub.status.idle": "2024-06-04T23:19:08.565879Z",
          "shell.execute_reply": "2024-06-04T23:19:08.565674Z"
        },
        "lines_to_next_cell": 0,
        "id": "a83f4bd2",
        "outputId": "3d60e9ed-f642-498d-8518-573f3e851073"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Sales', 'CompPrice', 'Income', 'Advertising', 'Population', 'Price',\n",
              "       'ShelveLoc', 'Age', 'Education', 'Urban', 'US'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "Carseats = load_data('Carseats')\n",
        "Carseats.columns\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "69025ecd",
      "metadata": {
        "id": "69025ecd"
      },
      "source": [
        "The `Carseats`  \n",
        " data includes qualitative predictors such as\n",
        " `ShelveLoc`, an indicator of the quality of the shelving\n",
        " location --- that is,\n",
        "the  space within a store in which the car seat is displayed. The predictor\n",
        " `ShelveLoc`  takes on three possible values, `Bad`, `Medium`, and `Good`.\n",
        "Given a qualitative variable such as  `ShelveLoc`, `ModelSpec()` generates dummy\n",
        "variables automatically.\n",
        "These variables are often referred to as a *one-hot encoding* of the categorical\n",
        "feature. Their columns sum to one, so to avoid collinearity with an intercept, the first column is dropped. Below we see\n",
        "the column `ShelveLoc[Bad]` has been dropped, since `Bad` is the first level of `ShelveLoc`.\n",
        "Below we fit a multiple regression model that includes some interaction terms."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "24efc6f1",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2024-06-04T23:19:08.567067Z",
          "iopub.status.busy": "2024-06-04T23:19:08.566984Z",
          "iopub.status.idle": "2024-06-04T23:19:08.585971Z",
          "shell.execute_reply": "2024-06-04T23:19:08.585717Z"
        },
        "lines_to_next_cell": 0,
        "id": "24efc6f1",
        "outputId": "079686d5-ef3d-44fd-c7c6-9052c3df3506"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>6.5756</td>\n",
              "      <td>1.009</td>\n",
              "      <td>6.519</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CompPrice</th>\n",
              "      <td>0.0929</td>\n",
              "      <td>0.004</td>\n",
              "      <td>22.567</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0.0109</td>\n",
              "      <td>0.003</td>\n",
              "      <td>4.183</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Advertising</th>\n",
              "      <td>0.0702</td>\n",
              "      <td>0.023</td>\n",
              "      <td>3.107</td>\n",
              "      <td>0.002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Population</th>\n",
              "      <td>0.0002</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.433</td>\n",
              "      <td>0.665</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>-0.1008</td>\n",
              "      <td>0.007</td>\n",
              "      <td>-13.549</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ShelveLoc[Good]</th>\n",
              "      <td>4.8487</td>\n",
              "      <td>0.153</td>\n",
              "      <td>31.724</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ShelveLoc[Medium]</th>\n",
              "      <td>1.9533</td>\n",
              "      <td>0.126</td>\n",
              "      <td>15.531</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>-0.0579</td>\n",
              "      <td>0.016</td>\n",
              "      <td>-3.633</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>-0.0209</td>\n",
              "      <td>0.020</td>\n",
              "      <td>-1.063</td>\n",
              "      <td>0.288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Urban[Yes]</th>\n",
              "      <td>0.1402</td>\n",
              "      <td>0.112</td>\n",
              "      <td>1.247</td>\n",
              "      <td>0.213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>US[Yes]</th>\n",
              "      <td>-0.1576</td>\n",
              "      <td>0.149</td>\n",
              "      <td>-1.058</td>\n",
              "      <td>0.291</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income:Advertising</th>\n",
              "      <td>0.0008</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.698</td>\n",
              "      <td>0.007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price:Age</th>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.801</td>\n",
              "      <td>0.424</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      coef  std err       t  P>|t|\n",
              "intercept           6.5756    1.009   6.519  0.000\n",
              "CompPrice           0.0929    0.004  22.567  0.000\n",
              "Income              0.0109    0.003   4.183  0.000\n",
              "Advertising         0.0702    0.023   3.107  0.002\n",
              "Population          0.0002    0.000   0.433  0.665\n",
              "Price              -0.1008    0.007 -13.549  0.000\n",
              "ShelveLoc[Good]     4.8487    0.153  31.724  0.000\n",
              "ShelveLoc[Medium]   1.9533    0.126  15.531  0.000\n",
              "Age                -0.0579    0.016  -3.633  0.000\n",
              "Education          -0.0209    0.020  -1.063  0.288\n",
              "Urban[Yes]          0.1402    0.112   1.247  0.213\n",
              "US[Yes]            -0.1576    0.149  -1.058  0.291\n",
              "Income:Advertising  0.0008    0.000   2.698  0.007\n",
              "Price:Age           0.0001    0.000   0.801  0.424"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "allvars = list(Carseats.columns.drop('Sales'))\n",
        "y = Carseats['Sales']\n",
        "final = allvars + [('Income', 'Advertising'),\n",
        "                   ('Price', 'Age')]\n",
        "X = MS(final).fit_transform(Carseats)\n",
        "model = sm.OLS(y, X)\n",
        "summarize(model.fit())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a8a76419",
      "metadata": {
        "id": "a8a76419"
      },
      "source": [
        "In the first line above, we made `allvars` a list, so that we\n",
        "could add the interaction terms two lines down.\n",
        "Our model-matrix builder has created a `ShelveLoc[Good]`\n",
        "dummy variable that takes on a value of 1 if the\n",
        "shelving location is good, and 0 otherwise. It has also created a `ShelveLoc[Medium]`\n",
        "dummy variable that equals 1 if the shelving location is medium, and 0 otherwise.\n",
        "A bad shelving location corresponds to a zero for each of the two dummy variables.\n",
        "The fact that the coefficient for `ShelveLoc[Good]` in the regression output is\n",
        "positive indicates that a good shelving location is associated with high sales (relative to a bad location).\n",
        "And `ShelveLoc[Medium]` has a smaller positive coefficient,\n",
        "indicating that a medium shelving location leads to higher sales than a bad\n",
        "shelving location, but lower sales than a good shelving location.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Auto = load_data('Auto')\n",
        "y = Auto['mpg']\n",
        "design7 = MS(['horsepower'])\n",
        "X = design7.fit_transform(Auto)\n",
        "model = sm.OLS(y,X)\n",
        "results7 = model.fit()\n",
        "summarize(results7)\n",
        "# there seems to be a relationship between horespower and mpg since the p value is essentially 0\n",
        "# there is a negative relationship, being that for 100 units of horsepower increasing, 15 units decrease from mpg\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "R9U0Ivxos3oM",
        "outputId": "c018ceaf-a08b-4eb9-a4c0-5b40f066dcd8"
      },
      "id": "R9U0Ivxos3oM",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               coef  std err       t  P>|t|\n",
              "intercept   39.9359    0.717  55.660    0.0\n",
              "horsepower  -0.1578    0.006 -24.489    0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b224b819-06e1-432a-842a-a16d12431b36\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>39.9359</td>\n",
              "      <td>0.717</td>\n",
              "      <td>55.660</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horsepower</th>\n",
              "      <td>-0.1578</td>\n",
              "      <td>0.006</td>\n",
              "      <td>-24.489</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b224b819-06e1-432a-842a-a16d12431b36')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b224b819-06e1-432a-842a-a16d12431b36 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b224b819-06e1-432a-842a-a16d12431b36');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-80a64cce-461d-45d2-a3d1-1a85e52b3c81\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-80a64cce-461d-45d2-a3d1-1a85e52b3c81')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-80a64cce-461d-45d2-a3d1-1a85e52b3c81 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# there is a negative relationship, being that for 100 units of horsepower increasing, 15 units decrease from mpg\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.35052715285908,\n        \"min\": -0.1578,\n        \"max\": 39.9359,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.1578,\n          39.9359\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5027529214236353,\n        \"min\": 0.006,\n        \"max\": 0.717,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.006,\n          0.717\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.6739014053206,\n        \"min\": -24.489,\n        \"max\": 55.66,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -24.489,\n          55.66\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_df = pd.DataFrame({'horsepower': [98]})\n",
        "test_X = design7.transform(test_df)\n",
        "pred = results7.get_prediction(test_X)\n",
        "pred.predicted_mean\n",
        "#  the predicted mpg for a horsepower of 98 is 24.467"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3pW_mc5yvQEq",
        "outputId": "830fba4b-1cfc-4c4f-b32c-65facf06583d"
      },
      "id": "3pW_mc5yvQEq",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([24.46707715])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confidence_int = pred.conf_int(alpha=0.05)\n",
        "prediction_int = pred.conf_int(obs=True, alpha=0.05)\n",
        "print(confidence_int, prediction_int)\n",
        "# the confidence interval: [23.97, 24.96]\n",
        "# the prediction interval: [14.81, 31.12]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5G_4-9xXwqIy",
        "outputId": "3d2d8091-9034-451e-d329-21f2e7ace773"
      },
      "id": "5G_4-9xXwqIy",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[23.97307896 24.96107534]] [[14.80939607 34.12475823]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def abline(ax, m, b,*args,**kwargs):\n",
        "  xlim = ax.get_xlim()\n",
        "  ylim = [m*xlim[0] +b , m*xlim[1]+b]\n",
        "  ax.plot(xlim,ylim,*args,**kwargs)\n",
        "\n",
        "ax = Auto.plot.scatter('horsepower','mpg')\n",
        "print(results7.params[1])\n",
        "print(results7.params[0])\n",
        "\n",
        "abline(ax, results7.params[1],results7.params[0],'r--',linewidth=3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "go80NLsVvRy9",
        "outputId": "ce122713-27e9-49c9-b164-d0ba281d6f82"
      },
      "id": "go80NLsVvRy9",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-b298454bca09>:7: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  print(results7.params[1])\n",
            "<ipython-input-9-b298454bca09>:8: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  print(results7.params[0])\n",
            "<ipython-input-9-b298454bca09>:10: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  abline(ax, results7.params[1],results7.params[0],'r--',linewidth=3)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-0.15784473335365357\n",
            "39.93586102117048\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas.plotting import scatter_matrix\n",
        "scatter_matrix(Auto,figsize=(8,8),diagonal= 'hist',alpha=0.7)"
      ],
      "metadata": {
        "id": "f8mFw_Gu1fYw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "0d0a4eac-2c1a-4cb2-d711-9a4593e00db0"
      },
      "id": "f8mFw_Gu1fYw",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: xlabel='mpg', ylabel='mpg'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='mpg'>,\n",
              "        <Axes: xlabel='displacement', ylabel='mpg'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='mpg'>,\n",
              "        <Axes: xlabel='weight', ylabel='mpg'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='mpg'>,\n",
              "        <Axes: xlabel='year', ylabel='mpg'>,\n",
              "        <Axes: xlabel='origin', ylabel='mpg'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='displacement', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='weight', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='year', ylabel='cylinders'>,\n",
              "        <Axes: xlabel='origin', ylabel='cylinders'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='displacement'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='displacement'>,\n",
              "        <Axes: xlabel='displacement', ylabel='displacement'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='displacement'>,\n",
              "        <Axes: xlabel='weight', ylabel='displacement'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='displacement'>,\n",
              "        <Axes: xlabel='year', ylabel='displacement'>,\n",
              "        <Axes: xlabel='origin', ylabel='displacement'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='displacement', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='weight', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='year', ylabel='horsepower'>,\n",
              "        <Axes: xlabel='origin', ylabel='horsepower'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='weight'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='weight'>,\n",
              "        <Axes: xlabel='displacement', ylabel='weight'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='weight'>,\n",
              "        <Axes: xlabel='weight', ylabel='weight'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='weight'>,\n",
              "        <Axes: xlabel='year', ylabel='weight'>,\n",
              "        <Axes: xlabel='origin', ylabel='weight'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='displacement', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='weight', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='year', ylabel='acceleration'>,\n",
              "        <Axes: xlabel='origin', ylabel='acceleration'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='year'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='year'>,\n",
              "        <Axes: xlabel='displacement', ylabel='year'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='year'>,\n",
              "        <Axes: xlabel='weight', ylabel='year'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='year'>,\n",
              "        <Axes: xlabel='year', ylabel='year'>,\n",
              "        <Axes: xlabel='origin', ylabel='year'>],\n",
              "       [<Axes: xlabel='mpg', ylabel='origin'>,\n",
              "        <Axes: xlabel='cylinders', ylabel='origin'>,\n",
              "        <Axes: xlabel='displacement', ylabel='origin'>,\n",
              "        <Axes: xlabel='horsepower', ylabel='origin'>,\n",
              "        <Axes: xlabel='weight', ylabel='origin'>,\n",
              "        <Axes: xlabel='acceleration', ylabel='origin'>,\n",
              "        <Axes: xlabel='year', ylabel='origin'>,\n",
              "        <Axes: xlabel='origin', ylabel='origin'>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 64 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Auto.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "VaZP_BuvHxuz",
        "outputId": "6123812f-92bf-40d1-e2d8-5a1bd9038ed6"
      },
      "id": "VaZP_BuvHxuz",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   mpg  cylinders  displacement  horsepower    weight  \\\n",
              "mpg           1.000000  -0.777618     -0.805127   -0.778427 -0.832244   \n",
              "cylinders    -0.777618   1.000000      0.950823    0.842983  0.897527   \n",
              "displacement -0.805127   0.950823      1.000000    0.897257  0.932994   \n",
              "horsepower   -0.778427   0.842983      0.897257    1.000000  0.864538   \n",
              "weight       -0.832244   0.897527      0.932994    0.864538  1.000000   \n",
              "acceleration  0.423329  -0.504683     -0.543800   -0.689196 -0.416839   \n",
              "year          0.580541  -0.345647     -0.369855   -0.416361 -0.309120   \n",
              "origin        0.565209  -0.568932     -0.614535   -0.455171 -0.585005   \n",
              "\n",
              "              acceleration      year    origin  \n",
              "mpg               0.423329  0.580541  0.565209  \n",
              "cylinders        -0.504683 -0.345647 -0.568932  \n",
              "displacement     -0.543800 -0.369855 -0.614535  \n",
              "horsepower       -0.689196 -0.416361 -0.455171  \n",
              "weight           -0.416839 -0.309120 -0.585005  \n",
              "acceleration      1.000000  0.290316  0.212746  \n",
              "year              0.290316  1.000000  0.181528  \n",
              "origin            0.212746  0.181528  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2693ae7-b361-432f-984c-bf9af3635a7e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cylinders</th>\n",
              "      <th>displacement</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>weight</th>\n",
              "      <th>acceleration</th>\n",
              "      <th>year</th>\n",
              "      <th>origin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mpg</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.777618</td>\n",
              "      <td>-0.805127</td>\n",
              "      <td>-0.778427</td>\n",
              "      <td>-0.832244</td>\n",
              "      <td>0.423329</td>\n",
              "      <td>0.580541</td>\n",
              "      <td>0.565209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cylinders</th>\n",
              "      <td>-0.777618</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.950823</td>\n",
              "      <td>0.842983</td>\n",
              "      <td>0.897527</td>\n",
              "      <td>-0.504683</td>\n",
              "      <td>-0.345647</td>\n",
              "      <td>-0.568932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>displacement</th>\n",
              "      <td>-0.805127</td>\n",
              "      <td>0.950823</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.897257</td>\n",
              "      <td>0.932994</td>\n",
              "      <td>-0.543800</td>\n",
              "      <td>-0.369855</td>\n",
              "      <td>-0.614535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horsepower</th>\n",
              "      <td>-0.778427</td>\n",
              "      <td>0.842983</td>\n",
              "      <td>0.897257</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.864538</td>\n",
              "      <td>-0.689196</td>\n",
              "      <td>-0.416361</td>\n",
              "      <td>-0.455171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weight</th>\n",
              "      <td>-0.832244</td>\n",
              "      <td>0.897527</td>\n",
              "      <td>0.932994</td>\n",
              "      <td>0.864538</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.416839</td>\n",
              "      <td>-0.309120</td>\n",
              "      <td>-0.585005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>acceleration</th>\n",
              "      <td>0.423329</td>\n",
              "      <td>-0.504683</td>\n",
              "      <td>-0.543800</td>\n",
              "      <td>-0.689196</td>\n",
              "      <td>-0.416839</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.290316</td>\n",
              "      <td>0.212746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>0.580541</td>\n",
              "      <td>-0.345647</td>\n",
              "      <td>-0.369855</td>\n",
              "      <td>-0.416361</td>\n",
              "      <td>-0.309120</td>\n",
              "      <td>0.290316</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.181528</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>origin</th>\n",
              "      <td>0.565209</td>\n",
              "      <td>-0.568932</td>\n",
              "      <td>-0.614535</td>\n",
              "      <td>-0.455171</td>\n",
              "      <td>-0.585005</td>\n",
              "      <td>0.212746</td>\n",
              "      <td>0.181528</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2693ae7-b361-432f-984c-bf9af3635a7e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2693ae7-b361-432f-984c-bf9af3635a7e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2693ae7-b361-432f-984c-bf9af3635a7e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c799d17b-8d67-49bc-b2c6-cf6c1cee7ee0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c799d17b-8d67-49bc-b2c6-cf6c1cee7ee0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c799d17b-8d67-49bc-b2c6-cf6c1cee7ee0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Auto\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"mpg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7872618248401377,\n        \"min\": -0.832244214831575,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.7776175081260227,\n          0.42332853690278693,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cylinders\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7967448686550586,\n        \"min\": -0.7776175081260227,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0,\n          -0.5046833793486444,\n          -0.7776175081260227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"displacement\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8260065959541416,\n        \"min\": -0.8051269467104577,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9508233008277828,\n          -0.5438004967345681,\n          -0.8051269467104577\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horsepower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8039516732687065,\n        \"min\": -0.7784267838977761,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8429833569186568,\n          -0.6891955103342376,\n          -0.7784267838977761\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7952179376818062,\n        \"min\": -0.832244214831575,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8975273403408176,\n          -0.4168392020037062,\n          -0.832244214831575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"acceleration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5977834814184086,\n        \"min\": -0.6891955103342376,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.5046833793486444,\n          1.0,\n          0.42332853690278693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5254541182328929,\n        \"min\": -0.41636147709998894,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.34564744033808426,\n          0.29031611333651997,\n          0.5805409660907859\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"origin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6140847152750115,\n        \"min\": -0.6145351145726985,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.5689315895422126,\n          0.21274580799458218,\n          0.5652087567164604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vars = list(Auto.columns.drop(['mpg']))\n",
        "\n",
        "\n",
        "X = MS(vars).fit_transform(Auto)\n",
        "no_accel = MS(vars + [('cylinders','displacement'),('weight','displacement'),('displacement','horsepower')]).fit_transform(Auto)\n",
        "y = Auto['mpg']\n",
        "model = sm.OLS(y,X)\n",
        "model1 = sm.OLS(y,no_accel)\n",
        "all_vars = model.fit()\n",
        "no_accel_results = model1.fit()\n",
        "print(no_accel_results.fvalue)\n",
        "summarize(all_vars)\n",
        "\n",
        "\n",
        "# since the f value is relatively high and the p value associated with the f statistic is essentially 0,\n",
        "# there is clear evidence between the variables and the mpg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "3--kLjffH7qG",
        "outputId": "45af182a-ad44-47e0-dfaf-cb1d445f66cc"
      },
      "id": "3--kLjffH7qG",
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "246.0003321055876\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 coef  std err       t  P>|t|\n",
              "intercept    -17.2184    4.644  -3.707  0.000\n",
              "cylinders     -0.4934    0.323  -1.526  0.128\n",
              "displacement   0.0199    0.008   2.647  0.008\n",
              "horsepower    -0.0170    0.014  -1.230  0.220\n",
              "weight        -0.0065    0.001  -9.929  0.000\n",
              "acceleration   0.0806    0.099   0.815  0.415\n",
              "year           0.7508    0.051  14.729  0.000\n",
              "origin         1.4261    0.278   5.127  0.000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-13b6e616-a52e-4116-aced-d0e5cbf85bc7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>-17.2184</td>\n",
              "      <td>4.644</td>\n",
              "      <td>-3.707</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cylinders</th>\n",
              "      <td>-0.4934</td>\n",
              "      <td>0.323</td>\n",
              "      <td>-1.526</td>\n",
              "      <td>0.128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>displacement</th>\n",
              "      <td>0.0199</td>\n",
              "      <td>0.008</td>\n",
              "      <td>2.647</td>\n",
              "      <td>0.008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horsepower</th>\n",
              "      <td>-0.0170</td>\n",
              "      <td>0.014</td>\n",
              "      <td>-1.230</td>\n",
              "      <td>0.220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weight</th>\n",
              "      <td>-0.0065</td>\n",
              "      <td>0.001</td>\n",
              "      <td>-9.929</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>acceleration</th>\n",
              "      <td>0.0806</td>\n",
              "      <td>0.099</td>\n",
              "      <td>0.815</td>\n",
              "      <td>0.415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>0.7508</td>\n",
              "      <td>0.051</td>\n",
              "      <td>14.729</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>origin</th>\n",
              "      <td>1.4261</td>\n",
              "      <td>0.278</td>\n",
              "      <td>5.127</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13b6e616-a52e-4116-aced-d0e5cbf85bc7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-13b6e616-a52e-4116-aced-d0e5cbf85bc7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-13b6e616-a52e-4116-aced-d0e5cbf85bc7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1b0067a9-1ca6-4186-835a-400926a51582\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1b0067a9-1ca6-4186-835a-400926a51582')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1b0067a9-1ca6-4186-835a-400926a51582 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# there is clear evidence between the variables and the mpg\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.20429682373146,\n        \"min\": -17.2184,\n        \"max\": 1.4261,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.4934,\n          0.0806,\n          -17.2184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6076456388147236,\n        \"min\": 0.001,\n        \"max\": 4.644,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.323,\n          0.099,\n          4.644\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.182047912280015,\n        \"min\": -9.929,\n        \"max\": 14.729,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -1.526,\n          0.815,\n          -3.707\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1524878800804463,\n        \"min\": 0.0,\n        \"max\": 0.415,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.128,\n          0.415,\n          0.008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "summarize(no_accel_results)\n",
        "# it seems that displacement, horsepower, weight, and year have high correlation to mpg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "wUNKFA7VJkAf",
        "outputId": "53a3fbb3-63d4-4dbb-b22a-0302999b50cb"
      },
      "id": "wUNKFA7VJkAf",
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            coef   std err       t  P>|t|\n",
              "intercept               -2.41660  4.438000  -0.545  0.586\n",
              "cylinders                0.82140  0.618000   1.329  0.185\n",
              "displacement            -0.07780  0.013000  -5.822  0.000\n",
              "horsepower              -0.14880  0.029000  -5.222  0.000\n",
              "weight                  -0.00620  0.001000  -4.443  0.000\n",
              "acceleration            -0.13120  0.097000  -1.357  0.175\n",
              "year                     0.75660  0.045000  16.822  0.000\n",
              "origin                   0.57970  0.258000   2.247  0.025\n",
              "cylinders:displacement  -0.00140  0.003000  -0.516  0.606\n",
              "weight:displacement      0.00001  0.000004   2.393  0.017\n",
              "displacement:horsepower  0.00040  0.000083   4.481  0.000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8d0cf64-f194-4bfa-a862-df01cf93771b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>std err</th>\n",
              "      <th>t</th>\n",
              "      <th>P&gt;|t|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>intercept</th>\n",
              "      <td>-2.41660</td>\n",
              "      <td>4.438000</td>\n",
              "      <td>-0.545</td>\n",
              "      <td>0.586</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cylinders</th>\n",
              "      <td>0.82140</td>\n",
              "      <td>0.618000</td>\n",
              "      <td>1.329</td>\n",
              "      <td>0.185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>displacement</th>\n",
              "      <td>-0.07780</td>\n",
              "      <td>0.013000</td>\n",
              "      <td>-5.822</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horsepower</th>\n",
              "      <td>-0.14880</td>\n",
              "      <td>0.029000</td>\n",
              "      <td>-5.222</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weight</th>\n",
              "      <td>-0.00620</td>\n",
              "      <td>0.001000</td>\n",
              "      <td>-4.443</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>acceleration</th>\n",
              "      <td>-0.13120</td>\n",
              "      <td>0.097000</td>\n",
              "      <td>-1.357</td>\n",
              "      <td>0.175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>0.75660</td>\n",
              "      <td>0.045000</td>\n",
              "      <td>16.822</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>origin</th>\n",
              "      <td>0.57970</td>\n",
              "      <td>0.258000</td>\n",
              "      <td>2.247</td>\n",
              "      <td>0.025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cylinders:displacement</th>\n",
              "      <td>-0.00140</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>-0.516</td>\n",
              "      <td>0.606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weight:displacement</th>\n",
              "      <td>0.00001</td>\n",
              "      <td>0.000004</td>\n",
              "      <td>2.393</td>\n",
              "      <td>0.017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>displacement:horsepower</th>\n",
              "      <td>0.00040</td>\n",
              "      <td>0.000083</td>\n",
              "      <td>4.481</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8d0cf64-f194-4bfa-a862-df01cf93771b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8d0cf64-f194-4bfa-a862-df01cf93771b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8d0cf64-f194-4bfa-a862-df01cf93771b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f379f158-2bbb-419f-98d4-116679c4f765\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f379f158-2bbb-419f-98d4-116679c4f765')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f379f158-2bbb-419f-98d4-116679c4f765 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# the coeff\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8621607833233582,\n        \"min\": -2.4166,\n        \"max\": 0.8214,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -0.1312,\n          -2.4166,\n          1.046e-05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.319268681538033,\n        \"min\": 4.37e-06,\n        \"max\": 4.438,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.097,\n          4.438,\n          4.37e-06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.25247362831122,\n        \"min\": -5.822,\n        \"max\": 16.822,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          -1.357,\n          -0.545,\n          2.393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23354034107427973,\n        \"min\": 0.0,\n        \"max\": 0.606,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.586,\n          0.185,\n          0.606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(all_vars))\n",
        "anova_lm(all_vars,no_accel_results)"
      ],
      "metadata": {
        "id": "1U3JkwuRLG-7",
        "outputId": "c74543ad-117b-4e06-b8b7-7e3a32c22da1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        }
      },
      "id": "1U3JkwuRLG-7",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'statsmodels.regression.linear_model.RegressionResultsWrapper'>\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   df_resid         ssr  df_diff     ss_diff          F        Pr(>F)\n",
              "0     384.0  4252.21253      0.0         NaN        NaN           NaN\n",
              "1     381.0  3194.30690      3.0  1057.90563  42.060459  1.687158e-23"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-326c950b-9e85-4fa6-85ed-b25bff46eeb7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df_resid</th>\n",
              "      <th>ssr</th>\n",
              "      <th>df_diff</th>\n",
              "      <th>ss_diff</th>\n",
              "      <th>F</th>\n",
              "      <th>Pr(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>384.0</td>\n",
              "      <td>4252.21253</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>381.0</td>\n",
              "      <td>3194.30690</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1057.90563</td>\n",
              "      <td>42.060459</td>\n",
              "      <td>1.687158e-23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-326c950b-9e85-4fa6-85ed-b25bff46eeb7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-326c950b-9e85-4fa6-85ed-b25bff46eeb7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-326c950b-9e85-4fa6-85ed-b25bff46eeb7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9d1900c0-e952-452a-b10f-61f74b658826\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d1900c0-e952-452a-b10f-61f74b658826')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9d1900c0-e952-452a-b10f-61f74b658826 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"anova_lm(all_vars,no_accel_results)\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df_resid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1213203435596424,\n        \"min\": 381.0,\n        \"max\": 384.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          381.0,\n          384.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ssr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 748.0522450239351,\n        \"min\": 3194.3069001636873,\n        \"max\": 4252.212530440178,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3194.3069001636873,\n          4252.212530440178\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"df_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1213203435596424,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ss_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1057.9056302764907,\n        \"max\": 1057.9056302764907,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1057.9056302764907\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 42.06045919953075,\n        \"max\": 42.06045919953075,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          42.06045919953075\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pr(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.687157957979254e-23,\n        \"max\": 1.687157957979254e-23,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.687157957979254e-23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax = subplots(figsize=(8,8))[1]\n",
        "ax.scatter(all_vars.fittedvalues, all_vars.resid)\n",
        "ax.set_xlabel('Fitted value')\n",
        "ax.set_ylabel('Residual')\n",
        "ax.axhline(0, c='k', ls='--');"
      ],
      "metadata": {
        "id": "xGq1aGklLSb8",
        "outputId": "ca067b36-a4b6-4e5b-f37f-fd57bf3a8b61",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        }
      },
      "id": "xGq1aGklLSb8",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FvpSYsOZEG7m"
      },
      "id": "FvpSYsOZEG7m",
      "execution_count": 26,
      "outputs": []
    }
  ],
  "metadata": {
    "jupytext": {
      "cell_metadata_filter": "-all",
      "main_language": "python",
      "notebook_metadata_filter": "-all"
    },
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}